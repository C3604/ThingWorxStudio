// Create namespace to avoid polluting global scope
var TW = TW || {};
TW.SDK = TW.SDK || {};

/**
 * APIContext is a message for API methods: GET, PUT, POST, DELETE.
 * It contains the entity type and name, the characteristic and target.
 * The configuration object for the constructor should contain the properties for a BaseContext
 * and contextType (GET, PUT, POST or DELETE), entityTypeCode, entityName, characteristic and target.
 */
TW.SDK.APIContext = function (config) {
    var entityTypeCode = TW.SDK.EntityTypes.UNKNOWN;
    var entityName = "";
    var characteristic = TW.SDK.Characteristics.UNKNOWN;
    var target = "";
    var headers = {};
    var parameters = new TW.SDK.Types.InfoTable();

    if (config) {
        if (config.entityTypeCode) {
            entityTypeCode = config.entityTypeCode;
        }
        if (config.entityName) {
            entityName = config.entityName;
        }
        if (config.characteristic) {
            characteristic = config.characteristic;
        }
        if (config.target) {
            target = config.target;
        }
        if (config.headers) {
            headers = config.headers;
        }
        if (config.parameters) {
            parameters = config.parameters;
        }
    }

    var api = _.extend({}, new TW.SDK.BaseContext(config), {
        getEntityTypeCode: function () {
            return entityTypeCode;
        },
        getEntityName: function () {
            return entityName;
        },
        getCharacteristic: function () {
            return characteristic;
        },
        getTarget: function () {
            return target;
        },
        getHeaders: function () {
            return headers;
        },
        getParameters: function () {
            return parameters;
        },
        /**
         * Read an APIContext from an ArrayBuffer. It will also read the BaseContext.
         * @param {ArrayBuffer} data
         */
        fromBinary: function (data) {
            var buffer = new DataView(data);
            this.readBaseContext(buffer);
            var offset = this.getBaseSize();
            entityTypeCode = buffer.getInt8(offset++);
            var message = {
                buffer: buffer,
                offset: offset
            };
            entityName = this.readUtf8(message);
            characteristic = buffer.getInt8(message.offset++);
            target = this.readUtf8(message);
            var numHeaders = buffer.getInt8(message.offset++);
            for (var i = 0; i < numHeaders; i++) {
                var key = this.readUtf8(message);
                var value = this.readUtf8(message);
                headers[key] = value;
            }
            var parameterType = buffer.getInt8(message.offset++);
            if (parameterType === TW.SDK.BaseTypes.INFOTABLE) {
                var infoTable = TW.SDK.Types.InfoTablePrimitive.decodeView(buffer, message.offset, data);
                parameters = infoTable.result;
            }
        },
        /**
         * Write the APIContext to an ArrayBuffer. It will write the BaseContext
         * @returns {ArrayBuffer}
         */
        toBinary: function () {
            var bufferSize = this.getBaseSize() + 4;
            bufferSize += entityName.length + 1;
            bufferSize += target.length + 1;
            var numHeaders = _.size(headers);
            _.each(headers, function (value, key) {
                bufferSize += key.length + 1;
                bufferSize += value.length + 1;
            });
            var buffer = new ArrayBuffer(bufferSize);

            var message = new DataView(buffer, 0);
            this.writeBaseContext(message);
            var offset = this.getBaseSize();
            message.setInt8(offset++, entityTypeCode);
            offset = this.writeUtf8(entityName, message, offset);
            message.setInt8(offset++, characteristic);
            offset = this.writeUtf8(target, message, offset);
            message.setInt8(offset++, numHeaders);
            var apiContext = this;
            _.each(headers, function (value, key) {
                offset = apiContext.writeUtf8(key, message, offset);
                offset = apiContext.writeUtf8(value, message, offset);
            });
            message.setInt8(offset++, TW.SDK.BaseTypes.INFOTABLE);
            var parametersBuffer = TW.SDK.Types.InfoTablePrimitive.encode(parameters);
            return TW.SDK.HelperFunctions.combineArrayBuffers([buffer, parametersBuffer]);
        }
    });

    return api;
};
