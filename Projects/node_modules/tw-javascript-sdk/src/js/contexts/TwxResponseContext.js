// Create namespace to avoid polluting global scope
var TW = TW || {};
TW.SDK = TW.SDK || {};

/**
 * ResponseContext is a message for a response to an APIContext from the server.
 * It contains an InfoTable result and optional resultMessage.
 * The configuration object for the constructor should contain the properties for a BaseContext
 * and result (an InfoTable) and optional resultMessage.
 */
TW.SDK.ResponseContext = function (config) {
    var result = null;
    var resultMessage = "";
    var resultType = TW.SDK.BaseTypes.NOTHING;

    if (config) {
        if (config.resultMessage) {
            resultMessage = config.resultMessage;
        }
        if (config.result) {
            result = config.result;
        }
        if (config.resultType) {
            resultType = config.resultType;
        }
    }

    var responseConfig = _.extend({
        contextType: TW.SDK.ContextTypes.RESPONSE
    }, config);
    var api = _.extend({}, new TW.SDK.BaseContext(responseConfig), {
        getResult: function () {
            return result;
        },
        getResultType: function () {
            return resultType;
        },
        getResultMessage: function () {
            return resultMessage;
        },
        getStatusCode: function () {
            return TW.SDK.StatusCodes.unencode(this.getContextType());
        },
        /**
         * Read a ResponseContext from an ArrayBuffer. It will also read the BaseContext.
         * @param {ArrayBuffer} data
         */
        fromBinary: function (data) {
            var buffer = new DataView(data);
            this.readBaseContext(buffer);
            var offset = this.getBaseSize();
            var message = TW.SDK.Types.StringPrimitive.decode(data.slice(offset));
            resultMessage = message.content;
            offset += message.length;
            resultType = buffer.getInt8(offset++);
            result = TW.SDK.Primitives.fromCode(resultType).decode(data.slice(offset));
        },
        /**
         * Write the ResponseContext to an ArrayBuffer. It will write the BaseContext
         * @returns {ArrayBuffer}
         */
        toBinary: function () {
            var buffers = [];

            buffers.push(new ArrayBuffer(this.getBaseSize()));
            buffers.push(TW.SDK.Types.StringPrimitive.encode(resultMessage));
            buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(resultType));
            buffers.push(TW.SDK.Primitives.fromCode(resultType).encode(result));

            var buffer = TW.SDK.HelperFunctions.combineArrayBuffers(buffers);

            var view = new DataView(buffer, 0);
            this.writeBaseContext(view);

            return buffer;
        }
    });

    return api;
};
