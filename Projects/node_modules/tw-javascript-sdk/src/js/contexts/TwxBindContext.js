// Create namespace to avoid polluting global scope
var TW = TW || {};
TW.SDK = TW.SDK || {};

/**
 * BindContext is a message for binding remote Things.
 * It may contain a gateway type and name, and an array of Thing names.
 * The configuration object for the constructor should contain the properties for a BaseContext
 * and a names array, and optionally gatewayName and gatewayType.
 */
TW.SDK.BindContext = function (config) {
    var names = [];
    var gatewayName = '';
    var gatewayType = '';

    if (config) {
        if (config.gatewayName) {
            gatewayName = config.gatewayName;
        }
        if (config.gatewayType) {
            gatewayType = config.gatewayType;
        }
        if (config.names) {
            names = config.names;
        }
    }

    var bindConfig = _.extend({
        contextType: TW.SDK.ContextTypes.BINDREQUEST
    }, config);
    var api = _.extend({}, new TW.SDK.BaseContext(bindConfig), {
        getNames: function () {
            return names;
        },
        getGatewayName: function () {
            return gatewayName;
        },
        getGatewayType: function () {
            return gatewayType;
        },
        /**
         * Read a BindContext from an ArrayBuffer. It will also read the BaseContext.
         * @param {ArrayBuffer} data
         */
        fromBinary: function (data) {
            var buffer = new DataView(data);
            this.readBaseContext(buffer);
            var offset = this.getBaseSize();
            var isGateway = buffer.getInt8(offset++);
            var message = {
                buffer: buffer,
                offset: offset
            };
            if (isGateway) {
                gatewayName = this.readUtf8(message);
                gatewayType = this.readUtf8(message);
            }
            var numNames = buffer.getInt16(message.offset);
            message.offset += 2;
            for (var i = 0; i < numNames; i++) {
                var name = this.readUtf8(message);
                names.push(name);
            }
        },
        /**
         * Write the BindContext to an ArrayBuffer. It will write the BaseContext
         * @returns {ArrayBuffer}
         */
        toBinary: function () {
            var bufferSize = this.getBaseSize() + 3;
            if (gatewayName && gatewayType) {
                bufferSize += gatewayName.length + 1;
                bufferSize += gatewayType.length + 1;
            }
            var numNames = names.length;
            var i;
            for (i = 0; i < numNames; i++) {
                bufferSize += names[i].length + 1;
            }
            var buffer = new ArrayBuffer(bufferSize);

            var message = new DataView(buffer, 0);
            this.writeBaseContext(message);
            var offset = this.getBaseSize();
            if (gatewayName && gatewayType) {
                message.setInt8(offset++, 1);
                offset = this.writeUtf8(gatewayName, message, offset);
                offset = this.writeUtf8(gatewayType, message, offset);
            } else {
                message.setInt8(offset++, 0);
            }
            message.setInt16(offset, numNames);
            offset += 2;
            for (i = 0; i < numNames; i++) {
                offset = this.writeUtf8(names[i], message, offset);
            }
            return buffer;
        }
    });

    return api;
};
