var TW = TW || {};
TW.SDK = TW.SDK || {};

/**
 * BaseContext is the base context object for APIContext, AuthContext, BindContext and ResponseContext.
 * It is not intended to be used as is, but provides common properties and functions for its sub objects.
 * The properties are set via a configuration object sent to the constructor. The configuration object for a BaseContext
 * should have 3 properties: requestId, endpointId and sessionId.
 * Properties _version and _multipart should not be changed. Property _contextType should be set by its sub objects.
 */
TW.SDK.BaseContext = function (config) {
    var version = 1;
    var contextType = TW.SDK.ContextTypes.UNKNOWN;
    var requestId = 0;
    var endpointId = -1;
    var sessionId = -1;
    var multipart = 0;

    if (config) {
        // version and multipart should keep default values
        // contextType set by sub objects
        if (!_.isUndefined(config.requestId)) {
            requestId = config.requestId;
        }
        if (!_.isUndefined(config.endpointId)) {
            endpointId = config.endpointId;
        }
        if (!_.isUndefined(config.sessionId)) {
            sessionId = config.sessionId;
        }
        if (config.contextType) {
            contextType = config.contextType;
        }
    }

    var api = {
        getVersion: function () {
            return version;
        },
        getContextType: function () {
            return contextType;
        },
        getRequestId: function () {
            return requestId;
        },
        getEndpointId: function () {
            return endpointId;
        },
        getSessionId: function () {
            return sessionId;
        },
        isMultipart: function () {
            return multipart;
        },
        getBaseSize: function () {
            // Size of the base portion of any message
            return 15;
        },
        /**
         * Set the BaseContext properties from a DataView message
         * @param {DataView} message
         */
        readBaseContext: function (message) {
            version = message.getInt8(0);
            contextType = message.getInt8(1);
            requestId = message.getInt32(2);
            endpointId = message.getInt32(6);
            sessionId = message.getInt32(10);
            multipart = message.getInt8(14);
        },
        /**
         * Write the BaseContext properties to a DataView message
         * @param {DataView} message
         */
        writeBaseContext: function (message) {
            // Assumes an allocated buffer and DataView passed into it from sub objects
            message.setInt8(0, version);
            message.setInt8(1, contextType);
            message.setInt32(2, requestId);
            message.setInt32(6, endpointId);
            message.setInt32(10, sessionId);
            message.setInt8(14, multipart);
        },
        /**
         * Read a UTF8 string from a DataView message
         * @param message - an object with a DataView buffer and an int offset
         * @returns {string}
         */
        readUtf8: function (message) {
            var buffer = message.buffer;
            var length = buffer.getInt8(message.offset++);
            var result = "";
            for (var i = 0; i < length; i++) {
                var character = String.fromCharCode(buffer.getInt8(message.offset++));
                result += character;
            }
            return result;
        },
        /**
         * Write a UTF8 string to a DataView message
         * @param {string} str - the string to write
         * @param {DataView} message - the message buffer
         * @param {int} offset - the offset in the message to start writing
         * @returns {int} - the new value of the offset
         */
        writeUtf8: function (str, message, offset) {
            message.setInt8(offset++, str.length);
            for (var i = 0; i < str.length; i++) {
                message.setInt8(offset++, str[i].charCodeAt(0));
            }
            return offset;
        },
        fromBinary: function (data) {
            var buffer = new DataView(data);
            this.readBaseContext(buffer);
        },
        toBinary: function () {
            var bufferSize = this.getBaseSize();
            var buffer = new ArrayBuffer(bufferSize);

            var message = new DataView(buffer, 0);
            this.writeBaseContext(message);
            return buffer;
        },
        isApiRequest: function () {
            return (contextType >= TW.SDK.ContextTypes.GET && contextType <= TW.SDK.ContextTypes.DELETE);
        },
        isBindRequest: function () {
            return (contextType === TW.SDK.ContextTypes.BINDREQUEST || contextType === TW.SDK.ContextTypes.UNBINDREQUEST);
        },
        isAuthRequest: function () {
            return contextType === TW.SDK.ContextTypes.AUTHREQUEST;
        },
        isClearAuthRequest: function () {
            return contextType === TW.SDK.ContextTypes.CLEARAUTHREQUEST;
        },
        isRequest: function () {
            return (contextType >= TW.SDK.ContextTypes.GET && contextType <= TW.SDK.ContextTypes.CLEARAUTHREQUEST);
        },
        isResponse: function () {
            return ((contextType !== TW.SDK.ContextTypes.UNKNOWN) && !this.isRequest());
        }
    };

    return api;
};

