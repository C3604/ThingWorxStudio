// Create namespace to avoid polluting global scope
var TW = TW || {};
TW.SDK = TW.SDK || {};

/**
 * AuthContext is a message for Authentication.
 * It contains the security claims for the auth. SecurityClaims could be appKey with the key, or userid and password.
 * The configuration object for the constructor should contain the properties for a BaseContext
 * and a securityClaims object.
 */
TW.SDK.AuthContext = function (config) {
    var securityClaims = {};
    if (config) {
        if (config.securityClaims) {
            securityClaims = config.securityClaims;
        }
    }

    var authConfig = _.extend({
        contextType: TW.SDK.ContextTypes.AUTHREQUEST
    }, config);
    var api = _.extend({}, new TW.SDK.BaseContext(authConfig), {
        getSecurityClaims: function () {
            return securityClaims;
        },
        /**
         * Read an AuthContext from an ArrayBuffer. It will also read the BaseContext.
         * @param {ArrayBuffer} data
         */
        fromBinary: function (data) {
            var buffer = new DataView(data);
            this.readBaseContext(buffer);
            var offset = this.getBaseSize();
            var numClaims = buffer.getInt8(offset++);
            var message = {
                buffer: buffer,
                offset: offset
            };
            for (var i = 0; i < numClaims; i++) {
                var key = this.readUtf8(message);
                var value = this.readUtf8(message);
                securityClaims[key] = value;
            }
        },
        /**
         * Write the AuthContext to an ArrayBuffer. It will write the BaseContext
         * @returns {ArrayBuffer}
         */
        toBinary: function () {
            var bufferSize = this.getBaseSize() + 1;
            var numClaims = _.size(securityClaims);
            _.each(securityClaims, function (value, key) {
                bufferSize += key.length + 1;
                bufferSize += value.length + 1;
            });
            var buffer = new ArrayBuffer(bufferSize);

            var message = new DataView(buffer, 0);
            this.writeBaseContext(message);
            var offset = 15;
            message.setInt8(offset++, numClaims);
            var authContext = this;
            _.each(securityClaims, function (value, key) {
                offset = authContext.writeUtf8(key, message, offset);
                offset = authContext.writeUtf8(value, message, offset);
            });
            return buffer;
        }
    });

    return api;
};
