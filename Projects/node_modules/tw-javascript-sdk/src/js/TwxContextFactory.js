var TW = TW || {};
TW.SDK = TW.SDK || {};
TW.SDK.ContextFactory = function (data) {
    var buffer = new DataView(data);
    var contextType = buffer.getInt8(1);
    var context;
    switch (contextType) {
        case TW.SDK.ContextTypes.RESPONSE:
        {
            context = new TW.SDK.ResponseContext();
            context.fromBinary(data);
            return context;
        }
        case TW.SDK.ContextTypes.AUTHREQUEST:
        {
            context = new TW.SDK.AuthContext();
            context.fromBinary(data);
            return context;
        }
        case TW.SDK.ContextTypes.BINDREQUEST:
        {
            context = new TW.SDK.BindContext();
            context.fromBinary(data);
            return context;
        }
        case TW.SDK.ContextTypes.GET:
        case TW.SDK.ContextTypes.PUT:
        case TW.SDK.ContextTypes.POST:
        case TW.SDK.ContextTypes.DELETE:
        {
            context = new TW.SDK.APIContext();
            context.fromBinary(data);
            return context;
        }
        default:
        {
            // Don't know what it is, just create a BaseContext
            context = new TW.SDK.BaseContext();
            return context;
        }
    }
};