var TW = TW || {};
TW.SDK = TW.SDK || {};
TW.SDK.Types = TW.SDK.Types || {};

(function () {
    var decodeAspect = function (data, aspect) {
        var view = new DataView(data);
        var offset = 0;

        var namePrimitive = TW.SDK.Types.StringPrimitive.decode(data);
        var name = namePrimitive.content;
        offset += namePrimitive.length;

        var type = view.getInt8(offset++);

        var valuePrimitive = TW.SDK.Primitives.fromCode(type).decode(data.slice(offset));
        var value = valuePrimitive.content;
        offset += valuePrimitive.length;

        aspect[name] = value;
        return offset;
    };

    var decodeDataShapeField = function (data, dataShape) {
        var view = new DataView(data);
        var offset = 0;

        var namePrimitive = TW.SDK.Types.StringPrimitive.decode(data);
        var name = namePrimitive.content;
        offset += namePrimitive.length;

        var descriptionPrimitive = TW.SDK.Types.StringPrimitive.decode(data.slice(offset));
        var description = descriptionPrimitive.content;
        offset += descriptionPrimitive.length;

        var type = TW.SDK.BaseTypes.fromCode(view.getInt8(offset++));

        var aspectCount = view.getInt16(offset);
        var aspects = {};
        offset += 2;

        for (var i = 0; i < aspectCount; i++) {
            offset += decodeAspect(data.slice(offset), aspects);
        }

        TW.SDK.Types.DataShapeHelper.addField(dataShape, name, description, type, aspects);

        return offset;
    };

    var decodeRow = function (data, fieldDefs, row) {
        var view = new DataView(data);
        var offset = 0;

        var fieldKeys = _.keys(fieldDefs);

        var fieldCount = view.getInt16(offset);
        offset += 2;

        for (var i = 0; i < fieldCount; i++) {
            var type = view.getInt8(offset++);
            var valuePrimitive = TW.SDK.Primitives.fromCode(type).decode(data.slice(offset));
            var value = valuePrimitive.content;
            offset += valuePrimitive.length;

            if (value !== null) {
                row[fieldKeys[i]] = value;
            }
        }

        return offset;
    };

    var encodeDataShapeField = function (fieldDefinition) {
        var buffers = [];

        buffers.push(TW.SDK.Types.StringPrimitive.encode(fieldDefinition.name));
        buffers.push(TW.SDK.Types.StringPrimitive.encode(fieldDefinition.description));
        buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(TW.SDK.BaseTypes[fieldDefinition.baseType]));
        buffers.push(TW.SDK.HelperFunctions.convertInt16ToBuffer(_.size(fieldDefinition.aspects)));

        _.each(fieldDefinition.aspects, function (value, key) {
            var type = TW.SDK.BaseTypes.infer(value);
            buffers.push(TW.SDK.Types.StringPrimitive.encode(key));
            buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(type));
            buffers.push(TW.SDK.Primitives.fromCode(type).encode(value));
        });

        return buffers;
    };

    var encodeRow = function (fieldDefinitions, row) {
        var buffers = [];

        buffers.push(TW.SDK.HelperFunctions.convertInt16ToBuffer(_.size(fieldDefinitions)));

        _.each(fieldDefinitions, function (field) {
            var value = row[field.name];
            var type;
            if (_.isUndefined(value) || _.isNull(value)) {
                type = TW.SDK.BaseTypes.NOTHING;
                buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(type));
                buffers.push(TW.SDK.Primitives.fromCode(type).encode());
            } else {
                type = TW.SDK.BaseTypes[field.baseType];
                buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(type));
                buffers.push(TW.SDK.Primitives.fromCode(type).encode(value));
            }
        });

        return buffers;
    };

    TW.SDK.Types.InfoTablePrimitive = {};

    TW.SDK.Types.InfoTablePrimitive.decodeView = function (view, offset, data) {
        var result = new TW.SDK.Types.InfoTable();
        var datashapeMarker = view.getInt8(offset++);
        while (datashapeMarker === 1) {
            offset += decodeDataShapeField(data.slice(offset), result.dataShape);
            datashapeMarker = view.getInt8(offset++);
        }

        var rowMarker = view.getInt8(offset++);

        while (rowMarker === 1) {
            var row = {};
            offset += decodeRow(data.slice(offset), result.dataShape.fieldDefinitions, row);
            TW.SDK.Types.InfoTableHelper.addRow(result, row);
            rowMarker = view.getInt8(offset++);
        }

        return {offset: offset, result: result};
    };

    TW.SDK.Types.InfoTablePrimitive.decode = function (data) {
        TW.SDK.HelperFunctions.validateParameter(data, 'data', ArrayBuffer);

        var view = new DataView(data);
        var offset = 0;
        var infoTable = TW.SDK.Types.InfoTablePrimitive.decodeView(view, offset, data);
        offset = infoTable.offset;
        var result = infoTable.result;

        return {
            content: result,
            length: offset
        };
    };

    TW.SDK.Types.InfoTablePrimitive.encode = function (content) {
        TW.SDK.HelperFunctions.validateParameter(content, 'content', 'object');

        var buffers = [];

        var fieldDefinitions = content.dataShape.fieldDefinitions;
        var rows = content.rows;
        var sortedFieldDefs = _.sortBy(fieldDefinitions, 'ordinal');

        _.each(sortedFieldDefs, function (fieldDef) {
            buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(1)); // Add Datashape Field marker byte
            buffers.push(encodeDataShapeField(fieldDef));
        });

        buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(0)); // Add Datashape Field marker byte (set to Not Present)

        _.each(rows, function (row) {
            buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(1)); // Add Row marker byte
            buffers.push(encodeRow(sortedFieldDefs, row));
        });

        buffers.push(TW.SDK.HelperFunctions.convertInt8ToBuffer(0)); // Add Row marker byte (set to Not Present)

        buffers = _.flatten(buffers);

        return TW.SDK.HelperFunctions.combineArrayBuffers(buffers);
    };

    TW.SDK.Types.InfoTablePrimitive.getDefaultValue = function () {
        return new TW.SDK.Types.InfoTable();
    };
})();
