var TW = TW || {};
TW.SDK = TW.SDK || {};

TW.SDK.BaseTypes = {
    NOTHING: -1,
    STRING: 0,
    NUMBER: 1,
    BOOLEAN: 2,
    DATETIME: 3,
    TIMESPAN: 4,
    INFOTABLE: 5,
    LOCATION: 6,
    XML: 7,
    JSON: 8,
    QUERY: 9,
    IMAGE: 10,
    HYPERLINK: 11,
    IMAGELINK: 12,
    PASSWORD: 13,
    HTML: 14,
    TEXT: 15,
    TAGS: 16,
    SCHEDULE: 17,
    VARIANT: 18,
    GUID: 20,
    BLOB: 21,
    INTEGER: 22,
    LONG: 23,
    PROPERTYNAME: 50,
    SERVICENAME: 51,
    EVENTNAME: 52,
    THINGNAME: 100,
    THINGSHAPENAME: 101,
    THINGTEMPLATENAME: 102,
    DATASHAPENAME: 104,
    MASHUPNAME: 105,
    MENUNAME: 106,
    BASETYPENAME: 107,
    USERNAME: 108,
    GROUPNAME: 109,
    CATEGORYNAME: 110,
    STATEDEFINITIONNAME: 111,
    STYLEDEFINITIONNAME: 112,
    MODELTAGVOCABULARYNAME: 113,
    DATATAGVOCABULARYNAME: 114,
    NETWORKNAME: 115,
    MEDIAENTITYNAME: 116,
    APPLICATIONKEYNAME: 117,
    LOCALIZATIONTABLENAME: 118,
    ORGANIZATIONNAME: 119,
    DASHBOARDNAME: 120,
    PERSISTENCEPROVIDERPACKAGENAME: 121,
    PERSISTENCEPROVIDERNAME: 122,
    PROJECTNAME: 123,
    VEC2: 124,
    VEC3: 125,
    VEC4: 126,
    THINGCODE: 127,

    fromCode: function(code) {
        TW.SDK.HelperFunctions.validateParameter(code, 'code', 'number');

        var value = _.findKey(TW.SDK.BaseTypes, function (value) {
            return code === value;
        });

        if (_.isUndefined(value)) {
            throw "Primitive code " + code + " not supported";
        }

        return value;
    },

    infer: function(content) {
        content = content || "";

        if ((typeof content) === 'string') {
            return this.STRING;
        } else if ((typeof content) === 'number') {
            return this.NUMBER;
        } else if ((typeof content) === 'boolean') {
            return this.BOOLEAN;
        } else if ((typeof content) === 'object') {
            if (content instanceof Date) {
                return this.DATETIME;
            } else if (content.dataShape) {
                return this.INFOTABLE;
            } else {
                return this.JSON;
            }
        }
    }
};
