var TW = TW || {};
TW.SDK = TW.SDK || {};
TW.SDK.Types = TW.SDK.Types || {};

(function () {
    TW.SDK.Types.StringPrimitive = {
        decode: function(data) {
            TW.SDK.HelperFunctions.validateParameter(data, 'data', ArrayBuffer);

            var view = new DataView(data);
            var length = view.getInt8(0);
            var offset = 1;

            /*jslint bitwise: true */
            if (length & 0x80) {
                length = view.getUint32(0) - 0x80000000;
                offset = 4;
            }
            /*jslint bitwise: false */

            var unsignedView = new Uint8Array(data, offset, length);
            var result = "";

            result = String.fromCharCode.apply(null, unsignedView);

            return {
                length: length + offset,
                content: decodeURIComponent(escape(result)) // Handle UTF8->UTF16 conversion
            };
        },

        encode: function(content) {
            TW.SDK.HelperFunctions.validateParameter(content, 'content', 'string');

            var str = content;

            str = unescape(encodeURIComponent(str)); // Convert from UTF16->UTF8
            var length = str.length; // Length should be correct even if non-ASCII characters are used
            var size = length;
            var offset = 0;

            // Determine the number of bytes needed to indicate string length
            if (str.length > 127) {
                size += 4;

                if (length < 0x80000000) {
                    /*jslint bitwise: true */
                    length = length | 0x80000000; // Equivalent to changing the highest bit
                    /*jslint bitwise: false */
                } else {
                    throw "String too long to be encoded, length is " + length;
                }
            } else {
                size += 1;
            }

            var buffer = new ArrayBuffer(size);
            var view = new DataView(buffer);

            if (str.length > 127) {
                view.setInt32(offset, length);
                offset += 4;
            } else {
                view.setInt8(offset++, length);
            }

            for (var i = 0; i < str.length; i++) {
                view.setInt8(offset++, str.charCodeAt(i));
            }

            return buffer;
        },

        getDefaultValue: function() {
            return "";
        }
    };
})();
