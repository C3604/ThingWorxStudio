var TW = TW || {};
TW.SDK = TW.SDK || {};

(function () {
    var BaseTypes = TW.SDK.BaseTypes;

    TW.SDK.Primitives = {
        fromCode: function(code) {
            TW.SDK.HelperFunctions.validateParameter(code, 'code', 'number');

            if (code === BaseTypes.NOTHING) {
                return TW.SDK.Types.NothingPrimitive;
            } else if (code === BaseTypes.STRING || code === BaseTypes.XML ||
                    code === BaseTypes.HYPERLINK || code === BaseTypes.PASSWORD ||
                    code === BaseTypes.HTML || code === BaseTypes.TEXT ||
                    code === BaseTypes.GUID ||
                    (code >= BaseTypes.PROPERTYNAME && code <= BaseTypes.EVENTNAME) ||
                    (code >= BaseTypes.THINGNAME && code <= BaseTypes.PROJECTNAME)) {
                return TW.SDK.Types.StringPrimitive;
            } else if (code === BaseTypes.JSON || code === BaseTypes.QUERY) {
                return TW.SDK.Types.JSONPrimitive;
            } else if (code === BaseTypes.BOOLEAN) {
                return TW.SDK.Types.BooleanPrimitive;
            } else if (code === BaseTypes.NUMBER) {
                return TW.SDK.Types.NumberPrimitive;
            } else if (code === BaseTypes.INTEGER) {
                return TW.SDK.Types.IntegerPrimitive;
            } else if (code === BaseTypes.LONG) {
                return TW.SDK.Types.LongPrimitive;
            } else if (code === BaseTypes.DATETIME) {
                return TW.SDK.Types.DateTimePrimitive;
            } else if (code === BaseTypes.LOCATION) {
                return TW.SDK.Types.LocationPrimitive;
            } else if (code === BaseTypes.BLOB || code === BaseTypes.IMAGE) {
                return TW.SDK.Types.BlobPrimitive;
            } else if (code === BaseTypes.INFOTABLE) {
                return TW.SDK.Types.InfoTablePrimitive;
            } else if (code === BaseTypes.TIMESPAN) {
                return TW.SDK.Types.TimespanPrimitive;
            } else if (code === BaseTypes.TAGS) {
                return TW.SDK.Types.TagCollectionPrimitive;
            } else if (code === BaseTypes.VARIANT) {
                return TW.SDK.Types.VariantPrimitive;
            } else if (code === BaseTypes.VEC2) {
                return TW.SDK.Types.Vec2Primitive;
            } else if (code === BaseTypes.VEC3) {
                return TW.SDK.Types.Vec3Primitive;
            } else if (code === BaseTypes.VEC4) {
                return TW.SDK.Types.Vec4Primitive;
            } else if (code === BaseTypes.THINGCODE) {
                return TW.SDK.Types.ThingCodePrimitive;
            } else {
                var codeName = BaseTypes.fromCode(code);

                if (codeName) {
                    throw "Primitive code " + codeName + " not supported";
                } else {
                    throw "Primitive code ID " + code + " not supported";
                }
            }
        }
    };
})();
