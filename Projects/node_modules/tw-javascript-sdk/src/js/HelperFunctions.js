// Create namespace to avoid polluting global scope
var TW = TW || {};
TW.SDK = TW.SDK || {};

TW.SDK.HelperFunctions = {
    getType: function(value) {
        if (value === null || value === undefined) {
            return '' + value;
        }

        if (typeof value === 'object' || typeof value === 'function') {
            return ({}).toString.call(value).match(/\[\S+\s(\w+)\]/)[1].toLowerCase();
        } else {
            return typeof value;
        }
    },

    validateParameter: function(parameter, parameterName, expectedType, allowNull, allowUndefined) {
        if (allowNull && _.isNull(parameter)) {
            return;
        }

        if (allowUndefined && _.isUndefined(parameter)) {
            return;
        }

        if ((typeof expectedType) !== 'string') {
            if (parameter instanceof expectedType) {
                return;
            }

            throw 'Parameter ' + parameterName + ' does not implement expected type ' + expectedType + '.';
        }

        var type = TW.SDK.HelperFunctions.getType(parameter);

        if (type !== expectedType) {
            throw 'Expected ' + expectedType + ' for parameter ' + parameterName + ', received ' + type + ' instead.';
        }
    },

    convertByteArrayToBuffer: function(array) {
        this.validateParameter(array, 'array', 'array');
        array = new Int8Array(array);

        var buffer = new ArrayBuffer(array.length);
        var view = new DataView(buffer);

        for (var i = 0; i < array.length; i++) {
            view.setInt8(i, array[i]);
        }

        return buffer;
    },

    convertInt8ToBuffer: function(content) {
        this.validateParameter(content, 'content', 'number');

        var buffer = new ArrayBuffer(1);
        var view = new DataView(buffer);

        view.setInt8(0, content);

        return buffer;
    },

    convertInt16ToBuffer: function(content) {
        this.validateParameter(content, 'content', 'number');

        var buffer = new ArrayBuffer(2);
        var view = new DataView(buffer);

        view.setInt16(0, content);

        return buffer;
    },

    convertInt32ToBuffer: function(content) {
        this.validateParameter(content, 'content', 'number');

        var buffer = new ArrayBuffer(4);
        var view = new DataView(buffer);

        view.setInt32(0, content);

        return buffer;
    },

    combineArrayBuffers: function(buffersArray) {
        this.validateParameter(buffersArray, 'buffersArray', 'array');

        var totalLength = 0;

        for (var i = 0; i < buffersArray.length; i++) {
            totalLength += buffersArray[i].byteLength;
        }

        var combinedBuffer = new ArrayBuffer(totalLength);
        var combinedView = new DataView(combinedBuffer);
        var currentOffset = 0;

        for (i = 0; i < buffersArray.length; i++) {
            var view = new Int8Array(buffersArray[i]);

            for (var j = 0; j < view.byteLength; j++) {
                combinedView.setInt8(currentOffset++, view[j]);
            }
        }

        return combinedBuffer;
    }
};
