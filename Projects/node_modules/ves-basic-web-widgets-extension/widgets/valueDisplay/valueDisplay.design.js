/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
function twxValueDisplay() {
  return {
    elementTag: 'twx-valuedisplay',

    label: 'ves-basic-web-widgets-extension:Value Display',

    category: 'basic-html',

    properties: addStateFormattingProperties([
      {
          name: 'class',
          label: 'ves-basic-web-widgets-extension:Class',
          datatype: 'string',
          //default: '',
          isBindingTarget: true
      },
      {
        name: 'value',
        label: 'ves-basic-web-widgets-extension:Value',
        datatype: 'string',
        default: 'value',
        isBindingTarget: true,
        defaultDependentField: true
      },
      {
        name: 'label',
        label: 'ves-basic-web-widgets-extension:Label',
        datatype: 'string',
        default: 'label',
        isBindingTarget: true
      },
      {
        name: 'class',
        label: 'ves-basic-web-widgets-extension:Class',
        datatype: 'string',
        default: 'simple-label',
        isBindingTarget: true
      },
      {
        name: 'visible',
        label: 'ves-basic-web-widgets-extension:Visible',
        datatype: 'boolean',
        default: true,
        isBindingTarget: true
      },
      {
        name: 'padding',
        label: 'ves-basic-web-widgets-extension:Padding',
        datatype: 'string',
        default: ''
      },
      {
        name: 'margin',
        label: 'ves-basic-web-widgets-extension:Margin',
        datatype: 'string',
        default: ''
      },
      {
        name: 'type',
        label: 'ves-basic-web-widgets-extension:Type',
        datatype: 'string',
        editor: 'select',
        options: [
              { label: 'ves-basic-web-widgets-extension:Inline', value: 'inline' },
              { label: 'ves-basic-web-widgets-extension:Inline With Label', value: 'inlinelabel' },
              { label: 'ves-basic-web-widgets-extension:Stacked Label', value: 'stackedlabel' },
              { label: 'ves-basic-web-widgets-extension:Stacked Label KPI', value: 'stackedlabelkpi' }
          ],
        default: 'inlinelabel'
      }
    ]),

    events: [
      {
        name: 'click',
        label: 'ves-basic-web-widgets-extension:Click'
      }
    ],

    designTemplate: function () {
      return '<div ng-switch on="me.type">' + 
                  '<div ng-switch-when="inline" class="{{me.class}}" style="margin:{{me.margin}}; padding:{{me.padding}};">{{me.value}}</div>' +
                  '<div ng-switch-when="inlinelabel" class="item {{me.class}}" style="margin:{{me.margin}}; padding:{{me.padding}};">{{me.label}}<span class="item-note">{{me.value}}</span></div>' +
                  '<div ng-switch-when="stackedlabel" class="item {{me.class}}" style="margin:{{me.margin}}; padding:{{me.padding}};"><div class="valuedisplay-label">{{me.label}}</div><div class="valuedisplay-value">{{me.value}}</div></div>' +
                  '<div ng-switch-when="stackedlabelkpi" class="item {{me.class}}" style="margin:{{me.margin}}; padding:{{me.padding}};"><div class="valuedisplay-label">{{me.label}}</div><div class="valuedisplay-value">{{me.value}}</div></div>' +
              '</div>';
    },

    runtimeTemplate: function (props) {
      var cssClasses = ['ng-hide', 'item'];
      if(props.enableStateFormatting) {
        cssClasses = cssClasses.concat(['basic-state-formatting']);
      }
      cssClasses = cssClasses.concat(['{{me.class}}']);

      var tmpl = '<div ng-show="app.fn.isTrue(me.visible)"  ';
      switch(props.type) {
        case 'inline':
          // remove the 'item' class from this case
          cssClasses.splice(cssClasses.indexOf('item'), 1);
          tmpl += ' ' +
            'class="' + cssClasses.join(' ') + '" ' +
            'ng-click="fireEvent(\'click\');" ' +
            'style="margin:'+ props.margin +'; padding:'+ props.padding +';">{{me.value}}</div>';
          break;
        case 'inlinelabel':
          tmpl += ' ' +
                   'class="' + cssClasses.join(' ') + '" ' +
                   'style="margin:'+ props.margin +'; padding:'+ props.padding +';" ' +
                   'ng-click="fireEvent(\'click\');">' +
                    '{{me.label}}' +
                    '<span class="item-note">{{me.value}}</span>' +
                  '</div>';
          break;
        case 'stackedlabel':
          tmpl += ' class="' + cssClasses.join(' ') + '" ' +
                    'ng-click="fireEvent(\'click\');" ' +
                    'style="margin:'+ props.margin +'; padding:'+ props.padding +';"> ' +
                    '<div class="valuedisplay-label">{{me.label}}</div>' +
                    '<div class="valuedisplay-value">{{me.value}}</div>' +
                  '</div>';
          break;
        case 'stackedlabelkpi':
          tmpl += ' ' +
                    'class="' + cssClasses.join(' ') + '" ' +
                    'style="margin:'+ props.margin +'; padding:'+ props.padding +';"' +
                    'ng-click="fireEvent(\'click\');">' +
                    '<div class="valuedisplay-label">{{me.label}}</div>' +
                    '<div class="valuedisplay-value-kpi">{{me.value}}</div>' +
                  '</div>';
          break;
        default:
          tmpl += ' ng-click="fireEvent(\'click\');" ' +
                    'class="' + cssClasses.join(' ') + '" ' +
                    'style="margin:'+ props.margin +'; padding:'+ props.padding +';">' +
                    '{{me.label}}' +
                    '<span class="item-note">{{me.value}}</span>' +
                  '</div>';
          break;
      }
      
      return tmpl;
    }
  }
}

twxAppBuilder.widget('twxValueDisplay', twxValueDisplay);