/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
/*jshint multistr:true */

/**
 * Generates a string that will contain the 'twx-state-format' directive and it's supporting properties when the widget
 * has state formatting enabled, otherwise when state formatting is disabled, an empty string will be returned.
 *
 * @param widgetProps
 * @param stateFormatValue [Optional] Used to augment/override the 'stateFormatValue', the attribute/property in stateFormatValue may
 *        actually reside on another object within the scope object (i.e. item.foo instead of just foo).
 *        If it's provided it will use the given value otherwise it will use the value from 'widgetProps.stateFormatValue'.
 * @return {string} String
 */
function getStateFormattingMarkup(widgetProps, stateFormatValue) {
  var str = '';
  if(widgetProps && widgetProps.enableStateFormatting) {
    str = ' twx-state-format="' + widgetProps.stateFormat + '" state-format-value="' + (stateFormatValue || widgetProps.stateFormatValue || '') + '"';
  }
  return str;
}

(function(twxAppBuilder) {
  var defaultText = 'Label';
  try {
    defaultText = i18next.t('ves-basic-web-widgets-extension:Label');
  }
  catch (e) {
    //Running on the server
  }

  function twxDataGrid() {
    return {
      elementTag: 'twx-data-grid',

      label: 'ves-basic-web-widgets-extension:Data Grid',

      category: 'basic-html',

      isRepeater: true,

      showChildren: false,

      columns: [],

      onAddDataBinding: function(data, ctrl, widgetInstance, $scope) {
        if (data.sourceType === 'data' && data.targetPath === 'data') {
          var columns = {};
          if (data.sourceScope) {
            widgetInstance.columns = angular.copy(data.sourceScope.service.metadata.Outputs.fieldDefinitions);
          }
          widgetInstance.source = data;
          //console.log("add data binding", this, widgetInstance, columns);
        }
      },

      onRemoveDataBinding: function(id, ctrl, widgetInstance, $scope) {
        var srcEl = ctrl.element().find('twx-databind[to-property="data"][from-expression]');
        if (!srcEl || srcEl.length <= 0) {
          delete ctrl.me.source;
          delete ctrl.me.columns;
          ctrl.element().find('[auto-generated-from]').remove();
        }
      },

      isVisibleInPalette:  true,

      properties: addStateFormattingProperties([
        {
          name: 'data',
          label: 'ves-basic-web-widgets-extension:Data',
          isBindingTarget: true,
          isBindingSource: false,
          datatype: 'columns',
          default: [],

          getCachedMetadata: function(ctrl) {
            var srcEl = ctrl.widget.element().find('twx-databind[to-property="data"][from-expression]');
            if (srcEl && srcEl.length > 0) {
              var srcPath = srcEl.attr('from-expression');
              var scope = top.angular.element(top.document.querySelector('[source-path="' + srcPath + '"]')).scope();
              if (scope && scope.service) {
                var metadata = scope.service.metadata;
                ctrl.widget.me.columns = angular.copy(metadata.Outputs.fieldDefinitions);
                ctrl.widget.me.source = {
                  baseType: srcEl.attr('base-type'),
                  sourceItemName: srcEl.attr('source-item-name'),
                  sourceName: srcEl.attr('source-name')
                };
              }
            }
          },
          getColumns: function(ctrl) {
            if (!ctrl.widget.me.columns)  {
              this.getCachedMetadata(ctrl);
            }

            return ctrl.widget.me.columns;
          },

          getColumnCount: function(ctrl){
            return Object.keys(this.getColumns(ctrl) || {}).length;
          },

          toggleSelectAll: function(ctrl) {
            var columns = this.getColumns(ctrl);
            var propContext = this;
            var columnsToAdd = [];

            Object.keys(columns).forEach(function(key)  {
              if (!propContext.doesColumnExist(columns[key], ctrl)) {
                columnsToAdd.push(columns[key]);
              }
            });

            if (columnsToAdd.length > 0) {
              var newItems = [];

              for (var i = 0, l = columnsToAdd.length; i < l; i++) {
                newItems.push(propContext._addColumn(columnsToAdd[i], ctrl));
              }

              ctrl.getScope().$root.$broadcast('paste', newItems, false);
            }
            else {
              Object.keys(columns).forEach(function(key) {
                propContext.removeColumn(columns[key], ctrl);
              });
            }
          },

          doesColumnExist: function(column, ctrl) {
            var col = ctrl.widget.element().find('[auto-generated-from="' + column.name + '"\]');
            return (col.length > 0);
          },

          getSelectedCount: function(ctrl){
            var columns = this.getColumns(ctrl);
            var propContext = this;
            var count = 0;

            if (columns) {
              Object.keys(columns).forEach(function(key) {
                if (propContext.doesColumnExist(columns[key], ctrl)) {
                  count++;
                }
              });
            }
            //console.log('selected count', count);
            return count;
          },

          areAllSelected: function(ctrl) {
            return this.getColumnCount(ctrl) === ctrl.widget.element().find('[auto-generated-from]').length;
          },

          getSource: function(ctrl) {
            if (!ctrl.widget.me.source) {
              this.getCachedMetadata(ctrl);
            }
            return ctrl.widget.me.source;
          },

          _addColumn: function(column, ctrl) {
            var source = this.getSource(ctrl);
            let columnTemplate = '\
              <twx-data-grid-col \
                  twx-widget="" \
                  widget-id="' + column.name + '-column-1" \
                  label="' + column.name + '" \
                  widget-name="' + column.name + '-column-1" \
                  auto-generated-from="' + column.name + '"\
                  state-format-value="' + column.name + '"\
                  is-widget-container="true">\
                <twx-container-content>\
                  <twx-label twx-widget \
                        widget-id="' + column.name + '-label-1" \
                        widget-name="' + column.name + '-label-1" \
                        >\
                      <twx-databind databind-id="db-1485454175373" source-type="data"\
                         source-name="' + source.sourceName + '"\
                         source-item-type="service"\
                         source-item-name="' + source.sourceItemName + '"\
                         source-item-field-name="' + column.name + '"\
                         binding-type="collection_item_field"\
                         from-expression="item[\'' + column.name + '\']"\
                         to-property="text"\
                         base-type="' + source.baseType + '">\
                      </twx-databind>\
                  </twx-label>\
                </twx-container-content>\
              </twx-data-grid-col>';

            return {source: columnTemplate};
          },

          addColumn: function(column, ctrl) {
              var newItems = [];
              newItems.push(this._addColumn(column, ctrl));
              ctrl.getScope().$root.$broadcast('paste', newItems, false);
          },

          removeColumn: function(column, ctrl) {
            var col = this.getColumnEl(column,ctrl);
            if (col.length > 0) {
              col[0]._widgetController.remove();
            }
          },

          getColumnEl: function(column, ctrl) {
            return ctrl.widget.element().find('[auto-generated-from="' + column.name + '"\]');
          },

          toggleColumn: function(column, ctrl) {
            if (this.getColumnEl(column,ctrl).length > 0) {
              this.removeColumn(column, ctrl);
            }
            else {
              this.addColumn(column, ctrl);
            }
          }
        },
        {
          name: 'visible',
          label: 'ves-basic-web-widgets-extension:Visible',
          datatype: 'boolean',
          default: true,
          isBindingTarget: true
        },
        {
          name: 'label',
          label: 'ves-basic-web-widgets-extension:Label',
          datatype: 'string',
          default: defaultText,
          isBindingTarget: true,
          isVisible: false
        },
        {
          name: 'class',
          label: 'ves-basic-web-widgets-extension:Class',
          datatype: 'string',
          default: '',
          isBindingTarget: true
        },
        {
          name: 'headerClass',
          label: 'ves-basic-web-widgets-extension:Header Class',
          datatype: 'string',
          default: '',
          isBindingTarget: true
        },
        {
          name: 'selectedRowClass',
          label: 'ves-basic-web-widgets-extension:Selected Row Class',
          datatype: 'string',
          default: '',
          isBindingTarget: true
        },
        {
          name: 'rowClass',
          label: 'ves-basic-web-widgets-extension:Row Class',
          datatype: 'string',
          default: '',
          isVisible: false
        },
        {
          name: 'cellClass',
          label: 'ves-basic-web-widgets-extension:Cell Class',
          datatype: 'string',
          default: '',
          isVisible: false
        }
        /* {
         name: 'multiselect',
         label: 'ves-basic-web-widgets-extension:Multi-Select',
         datatype: 'boolean',
         default: false,
         visible: false
         }, */

      ]),

      events: [
        {
          name: 'itemclick',
          label: 'ves-basic-web-widgets-extension:ItemClick'
        }
      ],

      designTemplate: function() {
        var tmpl = '\
        <div class="twx-data-grid design-time {{me.class}}">\
            <span class="label" ng-if="ctrl.queryDataBindings().length <= 0"> \
                 {{"ves-basic-web-widgets-extension:Bind a Service result to the Data property of this widget to enable column selection." | i18next }}\
            </span>\
            <span class="label" ng-if="ctrl.queryDataBindings().length > 0 && ctrl.element().find(\'twx-data-grid-col\').length <= 0"> \
                 {{"ves-basic-web-widgets-extension:Select columns to display. Available columns can be found under the Data property of the widget." | i18next }}\
            </span>\
            <twx-repeater-content></twx-repeater-content>\
        </div>';
        return tmpl;
      },

      runtimeTemplate: function (propertyValues, el, fullDoc, $) {
        var columnSelector = '[widget-id=' + propertyValues.widgetId + '] twx-data-grid-col';
        var columns = fullDoc.find(columnSelector);
        var tmpl = '\
        <table ng-show="app.fn.isTrue(me.visible)" class="ng-hide twx-data-grid {{me.class}}">\
          <thead class="{{me.headerClass}}"> \
            <tr>';

        columns.each(function (index, column) {
          column = $(column);
          var label = column.attr("label");
          var horiz = column.attr("horizontal-alignment");
          var cssName = label.replace(/[^a-zA-Z0-9\-\_\.]/gi, '_');
          //console.log("column: ", column.parent().html());
          tmpl += '\
              <th class="item-header-cell header-cell-' + cssName +' ' + horiz + '">\
                ' + label + '\
              </th>';
        });

        var stateFormatValue = (propertyValues.stateFormatValue) ? ('item.' + propertyValues.stateFormatValue) : '';
        tmpl += '\
            </tr>\
          </thead>\
          <tbody>\
          <tr ng-repeat="item in me.data" class="item-row {{me.rowClass}}"\
              ng-class="{\'{{me.selectedRowClass ? me.selectedRowClass: \'selected\'}}\': item._isSelected}"\
              ng-click="app.fn.clickItemInRepeater(item,me.data,me.multiselect);fireEvent(\'itemclick\', item, me.data, me.multiselect);"\
              ' + getStateFormattingMarkup(propertyValues, stateFormatValue) + '>\
              <twx-repeater-content></twx-repeater-content>\
            </tr>\
          </tbody>\
        </table>';

        return tmpl;
      }
    };
  }

  twxAppBuilder.widget('twxDataGrid', twxDataGrid);

})(twxAppBuilder);