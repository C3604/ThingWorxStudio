/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
(function () {
  'use strict';

  angular.module('common-html-widgets-ng', [])
    .directive('cjsChartConfigurator', cjsChartConfigurator)
    .directive('stateFormatPicker', stateFormatPicker)
    .directive('twxTabsDesigner', twxTabsDesigner)
    .directive('twxTabDesigner', twxTabDesigner)
    .directive('twxGridDesigner', twxGridDesigner);

  function cjsChartConfigurator($compile){

    var getTemplate = function(chartType){
      var template = [
        '<div>',
          '<h3>General</h3>',
          '<div>',
            '<div></div>',
          '</div>',
        '</div>'
      ].join('');
      return '<div><label>Show Grid Lines for X-axis <input type="checkbox" ng-model="props.chartOptions.value.scales.xAxes[0].gridLines.show" /></label></div>';
    };

    var linker = function(scope, element, attrs){
      element.html(getTemplate(attrs.chartType));
      $compile(element.contents())(scope);
    };

    return {
      restrict: 'E',
      //template: '<div><label>Show Grid Lines for X-axis <input type="checkbox" ng-model="props.showXGridLines.value" /></label></div>',
      link: linker
    };
  }

  function stateFormatPicker(DataProviderService) {
    var STYLE_DEF_CACHE = {};
    var STATE_CACHE = {};
    var linker = function(scope, element, attrs) {
      scope.stateDefs = {};

      DataProviderService.GetStateDefinitions()
      .then(function successCallback(response) {
        scope.stateDefinitions = response.data.rows;
      }, function errorCallback(response) {
        console.error("Could not download the state definitions from ThingWorx ", response);
      });

      scope.getSelectedStates = function(name) {
        if (name && !scope.stateDefs[name]) {
          scope.stateDefs[name] = true;
          DataProviderService.GetStateDefinitions(name)
            .then(function successCallback(response) {
              scope.stateDefs[name] = response.data;
            }, function errorCallback(response) {
              console.error("Could not download the state definitions from ThingWorx ", response);
              reject();
            });
        }
      };

      scope.pickState = function(name, props) {
        if (name) {
          props.stateFormat.pickedValue = name;
        }
      };

      scope.getStyleName = function(styleDefinition) {
        if (typeof styleDefinition.defaultStyleDefinition === 'object') {
          return styleDefinition.defaultStyleDefinition;
        }
        else if (STYLE_DEF_CACHE[styleDefinition.defaultStyleDefinition] === false) {
          //Temporarily hide the style preview while waiting for the real definition to get back from twx
          return false;
        }
        else if (!STYLE_DEF_CACHE[styleDefinition.defaultStyleDefinition]) {
          var name = styleDefinition.defaultStyleDefinition;
          STYLE_DEF_CACHE[styleDefinition.defaultStyleDefinition] = false;
          if (name) {
            DataProviderService.GetStyleDefinitions(name)
              .then(function successCallback(response) {
                STYLE_DEF_CACHE[styleDefinition.defaultStyleDefinition] = response.data.content;
                STYLE_DEF_CACHE[styleDefinition.defaultStyleDefinition]._custom = false;
                STYLE_DEF_CACHE[styleDefinition.defaultStyleDefinition]._name = name;
              }, function errorCallback(response) {
                console.error("Could not download the style definitions from ThingWorx ", response);
              });
          }
        }
        return STYLE_DEF_CACHE[styleDefinition.defaultStyleDefinition];
      };

      scope.checkValue = function(defaultValue) {
        if (defaultValue === '' || defaultValue === undefined) {
          return window.i18next.t('ves-basic-web-widgets-extension:DEFAULT');
        }
        return defaultValue;
      };

      if (scope.props && scope.props.stateFormat && scope.props.stateFormat.value) {
        scope.props.stateFormat.pickedValue = scope.props.stateFormat.value;
      }
    };
    return {
      restrict: 'E',
      replace: true,
      template: function(elem) {
        return '<div id="statePicker">' +
                  '<div class="stateDefinitions">' +
                    '<div class="filter">' +
                        '<span class="searchIcon"></span>' +
                        '<input class="searchBox" ng-model="stateFilterText" type="search" autofocus=""/>' +
                    '</div>' +
                    '<div class="entityList">' +
                      '<div class="results scroll">' +
                          '<ul>' +
                              '<li class="twxRow" ng-repeat="state in stateDefinitions | filter:stateFilterText" ng-class="{\'selected\': props.stateFormat.pickedValue === state.name}" >' +
                                  '<span class="state-name" ng-init="$parent.getSelectedStates(props.stateFormat.pickedValue)" ' +
                                       'ng-click="$parent.getSelectedStates(state.name); pickState(state.name, props)" tabindex="42">' +
                                   '{{ state.name }}</span>' +
                              '</li>' +
                          '</ul>' +
                      '</div>' +
                    '</div>' +
                  '</div>' +
                  '<div class="entityDetail">' +
                    '<div class="styleDefTable">' +
                      '<table>' +
                        '<thead>' +
                          '<td>{{"Value" | i18next }}</td>'+
                          '<td>{{"Display String" | i18next }}</td>'+
                          '<td>{{"Style Definition" | i18next }}</td>' +
                        '</thead>' +
                        '<tr ng-repeat="aStateDef in stateDefs[props.stateFormat.pickedValue].content.stateDefinitions" class="stateDefRow">'+
                          '<td class="stateDefCol-Value">'+
                            '<span ng-if="aStateDef.comparator" class="stateDefCol-Operator">{{checkValue(aStateDef.comparator)}} </span>' +
                            '{{checkValue(aStateDef.defaultValue)}}' +
                          '</td>' +
                          '<td class="stateDefCol-DisplayString">'+
                            '{{aStateDef.displayString}}' +
                          '</td>' +
                          '<td class="stateDefCol-Style" ng-if="getStyleName(aStateDef)">'+
                            '<div ng-init="stateDefStyle = getStyleName(aStateDef)">' +
                              '<div  ng-class="stateDefStyle._custom === false ? \'named-style-definition\' : \'custom-style-definition\'"><span class="style-definition-label">{{stateDefStyle._custom === false? stateDefStyle._name : "ves-basic-web-widgets-extension:Custom Style Definition" | i18next}}</span>' +
                                '<span title="image" class="image" ng-if="stateDefStyle.image"><img ng-src="/Thingworx/MediaEntities/{{stateDefStyle.image}}"/></span>' +
                                '<span title="backgroundColor" class="swatch backgroundColor" style="background-color:{{stateDefStyle.backgroundColor}};"></span>' +
                                '<span title="secondaryBackgroundColor" class="swatch secondaryBackgroundColor" style="background-color:{{stateDefStyle.secondaryBackgroundColor}};"></span>' +
                                '<span title="foregroundColor" class="swatch foregroundColor" style="background-color:{{stateDefStyle.foregroundColor}};"></span>' +
                                '<span title="lineColor" class="swatch lineColor" style="background-color:{{ stateDefStyle.lineColor}};"></span></div>' +
                              '</div>' +
                          '</td>' +
                        '</tr>' +
                      '</table>' +
                    '</div>'+
                  '</div>' +
                '</div>';
      },
      link: linker
    };
  }

  function twxGridDesigner($compile){
    var linker = function (scope, element, attrs) {
      //element.html(getTemplate(element));
      //$compile(element.contents())(scope);
      attrs.$observe('margin', function(value) {
        if (value) {
          angular.element(element[0]).attr('style', 'margin:' + value + ';');
        }
      });
      attrs.$observe('evenRows', function(value) {
        angular.element(element[0]).closest('twx-gridlayout').attr('even-rows', value);
      });
    };
    return {
      restrict: 'E',
      replace: true,
      template: function (elem) {
        return '<div class="twx-grid-designer">' + elem.html() + '</div>';
      },
      link: linker
    };
  }

  function twxTabsDesigner($compile){
    var getTemplate = function (element) {
      var template = '<div>Tabs Here</div>';
      console.log(template);
      return template;
    };

    var linker = function (scope, element, attrs) {
      //element.html(getTemplate(element));
      //$compile(element.contents())(scope);
      attrs.$observe('stripclass', function(value) {
        if (value) {
          angular.element(element[0].querySelectorAll('.tab-strip-item')).addClass(value);
        }
      });
      attrs.$observe('margin', function(value) {
        if (value) {
          angular.element(element[0]).attr('style', 'margin:' + value + ';');
        }
      });
    };

    return {
      restrict: 'E',
      replace: true,
      template: function (elem) {
        return '<div class="twx-tabs-designer"><div class="tab-strip button-bar"></div><div class="tab-content">' + elem.html() + '</div></div>';
      },
      link: linker,
      controller: ['$scope', '$element', function($scope, $element){
        this.registerTab = function(){
          var tabEl = $('<div class="button button-outline tab-strip-item"></div>');
          $element.find('.tab-strip').first().append(tabEl);
          return tabEl;
        };
      }]
    };
  }

  function twxTabDesigner($compile) {
    var linker = function (scope, element, attrs, controllers) {
      scope.tabItemEl = controllers[0].registerTab();

      attrs.$observe('title', function(value){
        scope.tabItemEl.text(value);
      });
      attrs.$observe('padding', function(value) {
        if (value) {
          angular.element(element[0]).attr('style', 'padding:' + value + ';');
        }
      });
    };

    return {
      restrict: 'E',
      require: ["^twxTabsDesigner"],
      link: linker
    };
  }
}());
