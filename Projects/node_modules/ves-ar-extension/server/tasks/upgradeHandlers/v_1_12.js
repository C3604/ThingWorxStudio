"use strict";

const fs = require('fs-extra');
const path = require('path');
const _ = require('lodash');
var log;

function addSwipeUpAppEvent(params, log) {
  try {
    const dataPath = path.join(params.path, 'src', 'shared', 'components', 'Data.json');

    if (fs.existsSync(dataPath)) {
      let data = fs.readJsonSync(dataPath);

      // only add the "swipeup" app event if it hasn't already been added
      if (_.find(data.children, {name: "twx-app-event", attributes: {name: "swipeup"}}) === undefined) {
        var newAppEvents = [{
          "name": "twx-app-event",
          "attributes": {
            "name": "swipeup",
            "isdeletable": false,
            "isvoicealiasable": true
          }
        }];

        data.children = data.children.concat(newAppEvents);
        fs.writeJsonSync(dataPath, data);
        log.debug('Added "swipeup" application event to Data.json');
      } else {
        log.debug('Did not add "swipeup" application event to Data.json, it already contains an application event with that name');
      }
    } else {
      log.error('Unable to add the "swipeup" application event. No Data.json file found.');
    }
  } catch (e) {
    log.error('Unexpected error when adding the "swipeup" application event.', e);
  }
}

function updateDescriptionsInMetadataJson(params, log) {
  try {
    const metadataPath = path.join(params.path, 'src', 'shared', 'components', 'metadata.json');

    if (fs.existsSync(metadataPath)) {
      let metadata = fs.readJsonSync(metadataPath);

      let hasMetadataBeenModified = false;
      _.each(metadata.experiences, function (experience) {
        if(experience.description.hasOwnProperty('en-us')) {
          // replace the en-us property with en-US
          experience.description['en-US'] = experience.description['en-us'];
          delete experience.description['en-us'];
          hasMetadataBeenModified = true;
        }
      });

      if(hasMetadataBeenModified) {
        fs.writeJsonSync(metadataPath, metadata);
      }
    } else {
      log.error('Unable to update the metadata.json file, the file was not found.');
    }
  } catch (e) {
    log.error('Unexpected error while migrating the experience descriptions in metadata.json.', e);
  }
}

/**
 * Do upgrade work for projects older than 1.12
 * @param {object} params - the same params given to onupgrade func + removeSync func
 * @param logger - logs to console & upgrade.log
 */
function onupgrade(params, logger) {
  log = logger;

  // replace the 'en-us' key with 'en-US' for each of the experience descriptions
  updateDescriptionsInMetadataJson(params, logger);

  if(params.settings.projectType === 'eyewear') {
    addSwipeUpAppEvent(params, log);
  }
}

module.exports = {
  version: '1.12.0',
  range: '<1.12.0 || 1.12.x',
  onupgrade: onupgrade
};
