"use strict";

const fs = require('fs-extra');
const path = require('path');
const _ = require('lodash');
var log;

/**
 * In 1.10, the application parameters were refactored to use a modeled javascript object similar to external data entities.
 * The application parameters were also modified to be saved to the Data.json file. This was all done to enable the use
 * of all possible data binding sources and targets.
 *
 * DT-8798 - Can't bind a service/event property to an App Param
 *
 * @param params
 */
function migrateApplicationParameters(params, log) {
    //1. Create new params from in-memory params
    //2. Save new params to Data.json
    //3. Delete in-memory params so a post-upgrade process saves the appConfig.json file without params.
    try {
        const dataPath = path.join(params.path, 'src', 'shared', 'components', 'Data.json');

        let newParams = [];
        if (params.settings.parameters) {
            Object.keys(params.settings.parameters).forEach((key) => {
                let oldParam = params.settings.parameters[key];
                let newParam = { attributes: {} };
                newParam.name = 'twx-app-param';
                newParam.attributes.id = oldParam.id;
                newParam.attributes.isbound = oldParam.isBound;
                newParam.attributes.isdeletable = oldParam.isDeletable;
                newParam.attributes.name = oldParam.name;
                newParam.attributes.value = oldParam.value;
                newParams.push(newParam);
            });

            if (fs.existsSync(dataPath)) {
                let data = fs.readJsonSync(dataPath);
                data.children = data.children.concat(newParams);
                fs.writeJsonSync(dataPath, data);
                log.debug('Moved application parameters to Data.json');

                delete params.settings.parameters;
                log.debug('Removed application parameters from in-memory settings');
            } else {
                log.error('Unable to migrate application parameters. No Data.json file found.');
            }
        } else {
            log.debug('Unable to migrate application parameters; none exist in project\'s appConfig.json.');
        }
    } catch (e) {
        log.error('Unexpected error during migration of application parameters.', e);
    }
}

function migrateServiceBindings(params, log) {
  //1. Fix all paths in View.json files and collect dictionary of widget ids
  //2. Fix paths in Data.json using the first hit in the dictionary

  try {
    const phone = path.join(params.path, 'src', 'phone', 'components');
    const views = params.getViews(params.settings);
    var widgetIdDict = {};
    let changeMade = false;
    let viewName;

    /**
     * Iterate over every key/value, log all widgets to the dictionary
     *   and update all hander=app.view  to include the current view name
     */
    var viewJsonIterator = function (value, key, obj) {
      if (key === 'handler' && value && typeof value === 'string' && value.startsWith('app.view')) {
        // replace all the instances of ['widget-id'] with ["widget-id"]
        var val = (value.includes("['")) ? value.replace(/\[\'/g, '["').replace(/\'\]/g, '"]') : value;

        // replace the app.view with app.view["viewName"] if the value doesn't already start off with it
        const replacement = 'app.view["' + viewName + '"].wdg';
        if(!val.startsWith(replacement)) {
            log.log('Update the binding in view', val, viewName);
            obj[key] = val.replace('app.view', replacement);
            changeMade = true;
        }
      }
      else if (key === 'widget-id') {
        if (widgetIdDict[value]) {
          log.debug('Duplicate widget-id found', value,viewName);
        }
        widgetIdDict[value] = viewName;
      }
      else if (_.isObject(value) || _.isArray(value)) {
        _.forIn(value, viewJsonIterator);
      }
    };

    views.forEach(function(view) {
      log.debug("Migrate service bindings for view", view);
      viewName = view.fileName;
      const jsonFile = path.join(phone, view.fileName + '.json');
      if (fs.existsSync(jsonFile)) {
        log.debug('Updating bindings in view: ', viewName);
        const viewJson = fs.readJsonSync(jsonFile, {encoding: 'utf8'});
        changeMade = false;
        log.debug('Updating bindings in the ' + viewName + ' json, file contents: ' + JSON.stringify(viewJson));
        _.forIn(viewJson, viewJsonIterator);

        if (changeMade) {
          fs.writeJsonSync(jsonFile, viewJson);
        }
      }
      else {
        log.log("Could not fine view json file", jsonFile);
      }
    });

    var dataFile = path.join(params.path, 'src', 'shared', 'components', 'Data.json');
    if(fs.existsSync(dataFile)) {

      let changeMade = false;
      /**
       * Iterate over every key/value looking for a handler = app.view
       * And then add in the viewname from the dict:   app.view["'+ viewName +'"].wdg
       */
      var iterateData = function(value, key, obj) {
        if (key === 'handler' && value && value.startsWith('app.view')) {
          // replace all the instances of ['widget-id'] with ["widget-id"]
          var val = (value.includes("['")) ? value.replace(/\[\'/g, '["').replace(/\'\]/g, '"]') : value;

          // replace the app.view with app.view["viewName"] if the value doesn't already start off with it
          let widgetId = val.substring(val.indexOf('["') + 2, val.indexOf('"]'));
          let viewName = widgetIdDict[widgetId];
          const replacement = 'app.view["' + viewName + '"].wdg';
          if(!val.startsWith(replacement)) {
              log.debug('Update the Data.json binding', val, viewName);
              obj[key] = val.replace('app.view', replacement);
              changeMade = true;
          }
        }
        else if (_.isObject(value) || _.isArray(value)) {
          _.forIn(value, iterateData);
        }
      };

      const dataJson = fs.readJsonSync(dataFile, {encoding: 'utf8'});
      log.debug('Updating bindings in Data.json file, file contents: ' + JSON.stringify(dataJson));

      _.forIn(dataJson, iterateData);

      if (changeMade) {
        fs.writeJsonSync(dataFile, dataJson);
      }
    }

  } catch (e) {
    log.error('Unexpected error during migration of application parameters.', e);
  }
}

/**
 * Do upgrade work for projects older than 1.11
 * @param {object} params - the same params given to onupgrade func + removeSync func
 * @param logger - logs to console & upgrade.log
 */
function onupgrade(params, logger) {
    log = logger;
    migrateApplicationParameters(params, log);
    migrateServiceBindings(params, log);
}

module.exports = {
    version: '1.10.0',
    range: '<1.10.0 || 1.10.x',
    onupgrade: onupgrade,
    migrateApplicationParameters: migrateApplicationParameters,
    migrateServiceBindings: migrateServiceBindings
};