const fs = require('fs-extra');
const path = require('path');

/**
 * Convert twx html file into json file.
 * @param {string} file - path to a file minus the extension, .html and .json will be appended
 * @param {func} handleMissingFiles - func to handle the edge case where the json file is missing
 * @param params - the upgrade params
 * @param log - logs to console & upgrade.log
 * @private
 */
function convertToJSON(file, params, log, handleMissingFiles) {
    const htmlFile = file + '.html';
    const jsonFile = file + '.json';
    if(fs.existsSync(htmlFile)) {
        log.debug('converting', htmlFile, 'to json');
        const html = fs.readFileSync(htmlFile, {encoding: 'utf8'});
        log.debug('---contents of ' + htmlFile + '---\n' + html);
        if (fs.existsSync(jsonFile)) {
            const json = fs.readFileSync(jsonFile, {encoding: 'utf8'});
            log.error('---contents of ' + jsonFile + '---\n' + json);
            log.error('Unexpected state. Expected project to have either', htmlFile, 'or', jsonFile, ' but not both.');
            log.error('Determine whether the json or the html has the latest project info and delete the other to allow project upgrade to proceed.');
            throw new Error('convertToJson aborted due to unexpected state');
        } else {
            const convertedData = params.twxmlConverter.toBeautifiedJSON(html);
            fs.writeFileSync(jsonFile, convertedData);
            log.debug('json file created', jsonFile, 'Removing html file');
            fs.removeSync(htmlFile);
        }
    } else if(!fs.existsSync(jsonFile)) {
        handleMissingFiles(jsonFile);
    }
}

/**
 * Does upgrade work for projects older than 1.9
 * @param {object} params - the same params given to onupgrade func + removeSync func
 * @param log - logs to console & upgrade.log
 */
function onupgrade(params, log) {
    const settings = params.settings;
    const packagePath = path.join(params.path, '/package.json');
    if (fs.existsSync(packagePath)) {
        const packageJSONStr = fs.readFileSync(packagePath, 'utf8');
        log.debug('---contents of package.json---\n', packageJSONStr);
    }
    params.removeSync('/package.json');
    params.removeSync('/package.json.orig');
    params.removeSync('/package.json.base');

    const gitignorePath = path.join(params.path, '/.gitignore');
    if (fs.existsSync(gitignorePath)) {
        const oldContents = fs.readFileSync(gitignorePath, 'utf8');
        // older projects may have a .gitignore that contains only /dist and /stage
        // if there is nothing left after removing /dist and /stage, delete the .gitignore
        if (oldContents.replace(/dist\/\n/, '').replace(/stage\/\n/, '') === '') {
            log.debug('Remove obsolete .gitignore');
            params.removeSync('/.gitignore');
        }
    }
    log.debug('Deleting settings.path', settings.path);
    delete settings.path;
    log.debug('Deleting settings.studioPath', settings.studioPath);
    delete settings.studioPath;

    // convert Data and Device from html to json
    const shared = path.join(params.path, 'src', 'shared', 'components');
    const handleMissingFiles = function(jsonFile) {
        log.debug(jsonFile, 'missing, but that is benign. The OOTB version will be copied in when defaultProjectCopyScaffold is called.');
    };
    convertToJSON(path.join(shared, 'Data'), params, log, handleMissingFiles);
    convertToJSON(path.join(shared, 'Device'), params, log, handleMissingFiles);

    // convert all views from html to json
    const phone = path.join(params.path, 'src', 'phone', 'components');
    const views = params.getViews(settings);
    var viewError = false;
    views.forEach(function (view) {
        if (!view.fileName) {
            log.error('Invalid view:\n', view, '\nRequired fileName property is missing');
            viewError = true;
        } else {
            const handleMissingViewFiles = function (jsonFile) {
                log.error('Invalid view:', view, '\nRequired json file is missing', jsonFile);
                viewError = true;
            };
            convertToJSON(path.join(phone, view.fileName), params, log, handleMissingViewFiles);
        }
    });
    if(viewError) {
        const appConfig = path.resolve(params.path,'appConfig.json');
        log.error('Remove the invalid view(s) from', appConfig, ' to allow the upgrade to proceed.');
        throw new Error('Unexpected view data');
    }
}

module.exports = {
    version: '1.8.0',
    range: '<1.8.0 || 1.8.x',
    onupgrade: onupgrade,
    convertToJSON: convertToJSON
};