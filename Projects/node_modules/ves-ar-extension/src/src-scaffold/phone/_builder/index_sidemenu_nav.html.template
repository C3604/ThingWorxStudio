<!doctype html>
<html ng-controller="AppCtrl as app">
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <meta name = "format-detection" content = "telephone=no">
  {% if thumbnail %}
  <link rel="ptc-thingx-thumbnail" type="<%= thumbnail.type =%>" href="<%= thumbnail.href =%>">
  {% endif %}
  <link rel="stylesheet" href="css/system-widget-extensions.css?v<%= uuid =%>">
  <link rel="stylesheet" href="css/app-theme.css?v<%= uuid =%>">

  <!-- Extension Stylesheets -->
  {% for s in extensions.stylesheets %}<link rel="stylesheet" href="extensions/<%= s.extension =%>/<%= s.script =%>">
  {% endfor %}

  <link rel="stylesheet" href="css/app-runtime-base.css?v<%= uuid =%>">
  <link rel="stylesheet" href="css/app.css?v<%= uuid =%>">
  <script src="lib/cdn/ionic.bundle.min.js"></script>
  <script src="app-runtime.js"></script>
  <script src="extensions/combined-extension-runtime-libs.js"></script>
</head>
<body ng-cloak {% if menu %} class="leftmenu" {% endif %} onload="loadSetup()">
  {% if offlineSave %}
  <%= deviceHTMLContents =%>
  <%= dataHTMLContents =%>
  {% else %}
  <ng-include src="'app/shared/components/Device.html'"></ng-include>
  <ng-include src="'app/shared/components/Data.html'"></ng-include>
  {% endif %}
  <ion-side-menus ng-controller="AppsMenuCtrl" class="seethrough">
    <!-- Center content -->
    <ion-side-menu-content class="seethrough {% if menu %} hasHeaderShowing {% endif %}" drag-content="isCordovaApp">
    {% if menu %}
      <ion-nav-bar align-title="center" class="bar-light">
        <ion-nav-back-button>
          Back
        </ion-nav-back-button>
        <ion-nav-buttons side="left">
          <button class="button button-icon button-clear ion-navicon" ng-click="toggleLeftMenu()" menu-toggle="left">
          </button>
        </ion-nav-buttons>
      </ion-nav-bar>
      {% endif %}
      <ion-nav-view></ion-nav-view>
    </ion-side-menu-content>
    {% if menu %}
    <ion-side-menu enable-menu-with-back-views="false" delegate-handle="left" side="left" ng-cloak ng-hide="hideLeftMenu">
       <ion-header-bar class="bar-stable">
        <h1 class="title">Menu</h1>
      </ion-header-bar>
      <ion-content>
        <ion-list>
        {% for v in views %}
          {% if v.showInMainMenu %}
            <ion-item ng-click="navigateFromLeftMenu('/<%= v.fileName =%>')"><%= v.title =%></ion-item>
          {% endif %}
        {% endfor %}
        </ion-list>
      </ion-content>
    </ion-side-menu>
    {% endif %}
  </ion-side-menus>

<script src="lib/cdn/ng-cordova.min.js"></script>
<script src="lib/cdn/ngStorage.min.js"></script>
<script src="lib/uuid.js"></script>
<script src='lib/cdn/lodash.min.js'></script>
<script src="lib/twx-connector.js"></script>
<script src="lib/twx-client-core-all.js"></script>
<script src="lib/cdn/ng-google-chart.min.js"></script>
<script src="lib/bower-ng-twx-uicomponents/charts.js"></script>
<script src="lib/http-auth-interceptor.js"></script>
<script src="app/app.js?v<%= uuid =%>"></script>
<script src="app/app-initializer.js?v<%= uuid =%>"></script>

<!--<script src="appCtrl.js"></script>
<script src="appsMenuCtrl.js"></script>-->

<!-- TML Related -->
<script src="<%= tmlPathPrefix =%>/vuforia-angular.js"></script>
<script src="<%= tmlPathPrefix =%>/cssparser.js"></script>
<script src="<%= tmlPathPrefix =%>/loader/animation.js"></script>
<script src="<%= tmlPathPrefix =%>/loader/sequence.js"></script>
<script src="<%= tmlPathPrefix =%>/loader/ptcadapter/ARScene.js"></script>
<script src="<%= tmlPathPrefix =%>/loader/ptcadapter/ARPlayerAnimationAdapter.js"></script>
<script src="lib/cdn/three.min.js"></script>
<script src="<%= tmlPathPrefix =%>/tween/Tween.js"></script>
<script src="lib/cdn/d3.min.js"></script>
<!-- VuforiaImpl -->

<script name="recogniser" type="x-shader/x-fragment">
  precision mediump float;
  varying vec4 vertexCoord;
  varying vec2 texCoord;

  uniform bool useTexture;
  uniform vec4 surfaceColor;
  uniform float tick;
  uniform float active;
  uniform sampler2D sampler0;
  uniform sampler2D sampler1;
  void main() {
    vec4 color = surfaceColor;
    float td = -mod(1.0*tick,1.0) * 2.0 * 3.14159;
    float delta = (sin(td)+1.0)/2.0;
    if(useTexture) {
      color    = texture2D(sampler1, texCoord);
      vec2 mx  = texCoord - 0.5;
      vec2 rx  = vec2((cos(td)*mx.x+sin(td)*mx.y),(-sin(td)*mx.x+cos(td)*mx.y));
      vec4 msk = texture2D(sampler0,rx+0.5);
      if (active > 0.0) {
        vec4 tmpc = color * msk;
        tmpc.a  = color.a - (1.0 - msk.g);
        color = mix(color,tmpc,active);
      }
    }
    if (color.a < 0.35) {
      discard;
    }
    gl_FragColor = color;
  }
</script>
<script name="recogniser" type="x-shader/x-vertex">
  attribute vec4 vertexPosition;
  attribute vec2 vertexTexCoord;

  varying vec2 texCoord;
  varying vec4 normal;
  varying vec4 vertexCoord;
  uniform mat4 modelViewProjectionMatrix;
  void main() {
    gl_Position = modelViewProjectionMatrix * vertexPosition;
    vertexCoord = gl_Position;
    texCoord    = vertexTexCoord;
  }
</script>

<!-- Extension Angular Modules -->
{% for module in extensions.angular_modules %}<script src="extensions/<%=  module.substring(module.lastIndexOf(PATH_SEP) + 1) =%>"></script>
{% endfor %}

<script type="text/javascript">

updateTitleWithExpTitle();

var setUpAngularModuleAndBootstrap = function() {
  setUpAngularModuleAndBootstrap = function() {}; //no-op guarantees won't run twice
  angular.module('app')
    .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {

      $stateProvider

        {% for v in views %}
        .state('<%= v.fileName =%>', {
          url: '/<%= v.fileName =%>?entityName&thing&template&vumark',
          {% if offlineSave %}template: <%= v.inlineableHTML =%>,{% else %}templateUrl: 'app/components/<%= v.fileName =%>.html',{% endif %}
          cache: false,
          controller: 'BaseCtrl'
        })
        {% endfor %}

      $urlRouterProvider.otherwise('/<%= defaultRoute =%>');
    }]).run(function($rootScope, $timeout) {
       $rootScope.expTitle = document.title;
       $rootScope.enableVoiceCommands = <%= enableVoiceCommands =%>;
       $rootScope.$on('$ionicView.afterEnter', function(event, toState, toParams, fromState, fromParams) {
          $timeout(function() {
               document.title = $rootScope.expTitle;
               var expIdx = experienceInfo.findExperienceIndex(toState.stateId);
               if(expIdx >= 0) {
                   // update the description meta tag, only if an experience exists for the navigated-to view
                   appendDescriptionMetaData(experienceInfo.getDescription(expIdx));
               }
          }, 1);
       });
    });

  angular.bootstrap(document, ['app']);
};

var setupWrapper = function() {setUpAngularModuleAndBootstrap();};
function setupIonicListener() {
    window.ionic.Platform.ready(setupWrapper);
}
function loadSetup() {
    window.removeEventListener('load', loadSetup, false);
    if (window.cordova && window.cordova.plugins) {
        setupIonicListener();
    }
    else {
       document.addEventListener('deviceready', setupIonicListener, false);
       //Add in a desktop ready event here...
       //desktop-ready-replacement
    }
    //<Replace-add-on-load>
}
window.addEventListener('load', loadSetup);
</script>
</body>
</html>
