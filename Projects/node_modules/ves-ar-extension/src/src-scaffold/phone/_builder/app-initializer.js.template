// The API's in this file are used to initialize a mobile app/experience, it will set the page title as well as populate
// the params in the window.twx.app.params object.


var ExperienceInfo = function (metadata) {
    this.metadata = (metadata || {experiences: []});

    // returns the index of the experience from the metadata.experiences list, returns -1 if it can't find the experience with the given name
    this.findExperienceIndex = function (experienceName) {
        return _.findIndex((this.metadata.experiences || []), function(exp) { return exp.viewName == experienceName; });
    };

    // returns the title object for the experience at the given index, if the index is out of range empty string is returned
    this.getTitle = function(experienceIndex) {
        var title = '';
        if(experienceIndex >= 0 && experienceIndex < this.metadata.experiences.length) {
            title = this.metadata.experiences[experienceIndex].title.en;
        }
        return title;
    };

    // returns the description object for the experience at the given index, if the index is out of range undefined is returned
    this.getDescription = function(experienceIndex) {
        var description;
        if(experienceIndex >= 0 && experienceIndex < this.metadata.experiences.length) {
            description = this.metadata.experiences[experienceIndex].description;
        }
        return description;
    };
};

/**
  * Adds a description meta tag for each supported language.  If the meta tag already exists, it will update the contents.
  */
function appendDescriptionMetaData(descriptionObj) {
    descriptionObj = descriptionObj || {};
    var head = document.querySelector('head');

    // append a 'description' meta tag for each supported language
    Object.keys(descriptionObj).forEach(function(lang) {
        var meta = document.querySelector('meta[name="description"][lang="' + lang + '"]');
        if(!meta) {
            meta = document.createElement('meta');
            meta.name = "description";
            meta.lang = lang;
            meta.content = descriptionObj[lang];

            // add the meta tag to the document's head element
            head.appendChild(meta);
        } else {
            // update the meta tag value
            meta.content = descriptionObj[lang];
        }
    });
};

function updateTitleWithExpTitle() {
    var defaultParams = <%= parameters =%>;

    Object.keys(defaultParams).forEach(function(key) {
         if (defaultParams[key].value) {
            window.twx.app.params[key] = defaultParams[key].value;
         }
    });

    function getParameterByName(name, url) {
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);

        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    // get the index of the experience being loaded, default to the first view if the 'expIndex' is not passed on the URL
    var expIdx = parseInt(getParameterByName('expIndex', location.href) || '0', 10);

    // set the page title as the name of the loaded experience
    document.title = experienceInfo.getTitle(expIdx);

    appendDescriptionMetaData(experienceInfo.getDescription(expIdx));
};

var experienceInfo = new ExperienceInfo(<%= metadata =%>);
