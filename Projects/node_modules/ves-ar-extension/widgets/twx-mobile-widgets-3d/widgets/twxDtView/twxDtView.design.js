/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
(function (twxAppBuilder) {

  function twxDtView() {
    return {
      elementTag: 'twx-dt-view',
      label: 'ves-ar-extension:3D Container',
      isVisibleInPalette: false,
      category: 'ar',
      allowCopy: false,
      isContainer: true,
      hideRemoveButton: true,

      properties: [
        {
          name: 'visible',
          label: 'ves-ar-extension:Visible',
          datatype: 'boolean',
          default: true,
          isBindingTarget: true
        },
        {
          name: 'extendedtracking',
          label: 'ves-ar-extension:Extended Tracking',
          datatype: 'boolean',
          default: true,
          isBindingTarget: false,
          isVisible: function(props, $scope){
            let projectSettings = $scope.$root.projectSettings || {};
            return projectSettings.projectType !== 'eyewear';
          }
        },
        {
          name: 'src',
          label: 'ves-ar-extension:File Data Set',
          datatype: 'string',
          default: 'TW-VuMark.xml',
          isBindingTarget: false,
          isVisible: false,
          isDeprecated: true
        },
        {
          name: 'persistmap',
          label: 'ves-ar-extension:Persist Map',
          datatype: 'boolean',
          default: false,
          isBindingTarget: false,
          isVisible: function(props, $scope){
            let projectSettings = $scope.$root.projectSettings || {};
            return projectSettings.projectType !== 'eyewear';
          }
        },
        {
          name: 'camera',
          label: 'ves-ar-extension:Camera Parameters',
          datatype: 'json',
          default: {},
          isVisible: false
        },
        {
          name: 'near',
          label: 'ves-ar-extension:Camera Near Clipping Plane',
          datatype: 'number',
          default: 0.01,
          step: 0.01,
          min: 0.01,
          isVisible: true
        },
        {
          name: 'far',
          label: 'ves-ar-extension:Camera Far Clipping Plane',
          datatype: 'number',
          default: 200,
          min: 0.1,
          step: 'any',
          isVisible: true
        }
      ],

      designTemplate: function () {

        return '<twx-dt-3d-view>' +
          '<div class="orbit-control-toolbar">' +
          '<div class="orbit-controls border inline">' +
          '   <div title="Transform - Must select widget, translates or rotates on X, Y or Z axis" class="orbit-control" ng-click="ctrl.delegate.setTranslateMode()" ng-class="{selected: ctrl.delegate.getDraggerMode()==\'translate\', active: ctrl.delegate.hasSelectedObject() === true}"><span class="icon iconSmall iconTranslate"></span></div> ' +
          //                         '   <div title="Rotate - Must select model, rotate on X, Y or Z axis" class="orbit-control" ng-click="ctrl.delegate.setRotateMode()" ng-class="{selected: ctrl.delegate.getDraggerMode()==\'rotate\', active: ctrl.delegate.hasSelectedObject() === true}"><span class="icon iconSmall iconRotate"></span></div> '+
          '   <div title="Mate - Must select model or ThingMark, mate to nearest surface" class="orbit-control" ng-click="ctrl.delegate.setMateMode()" ng-class="{selected: ctrl.delegate.getDraggerMode()==\'mate\', active: ctrl.delegate.hasSelectedObject() === true}"><span class="icon iconSmall iconMate"></span></div> ' +
          '</div>' +
          '<div class="orbit-controls border inline">' +
          '  <div title="Zoom All - Zoom out to see all models" class="orbit-control active" ng-click="ctrl.delegate.doZoomAll()"><span class="icon iconSmall iconZoomAll"></span></div> ' +
          '  <div title="Zoom Selected - Zoom out to selected model" class="orbit-control" ng-class="{active: ctrl.delegate.hasSelectedObject() === true}" ng-click="ctrl.delegate.doZoomSelected()"><span class="icon iconSmall iconZoomSelected"></span></div> ' +
          '</div>' +
          '<div class="orbit-controls border inline">' +
          '  <div title="Hide Components" class="orbit-control active" ng-class="{selected: ctrl.delegate.getCompHideMode() === true}" ng-click="ctrl.delegate.toggleCompHideMode()"><span class="icon iconSmall iconHideComponents"></span></div> ' +
          '  <div title="Unhide All" class="orbit-control" ng-class="{active: ctrl.delegate.hasHiddenComponents() === true}" ng-click="ctrl.delegate.unhideAll()"><span class="icon iconSmall iconUnhideAll"></span></div> ' +
          '</div>' +
          '</div>' +
          '<twx-container-content></twx-container-content>' +
          '<canvas id="canvas3D"/>' +
          '</twx-dt-3d-view>';
      },

      runtimeTemplate: function (props) {
        var tmpl = '' +
          '<twx-dt-view near="' + props.near + '" far="' + props.far + '" extendedtracking="' + props.extendedtracking + '" persistmap="' + props.persistmap + '">\n' +
          '     <twx-dt-tracker id="tracker1">\n' +
          '        <twx-container-content>\n' +
          '           <div class="phantom" ng-hide="hidePhantom">\n' +
          '               <div class="phantomText" ng-hide="hidePhantom">Point camera at ThingMark</div>\n' +
          '           </div>\n' +
          '        </twx-container-content>\n' +
          '     </twx-dt-tracker>\n' +
          '</twx-dt-view>';
        return tmpl;
      },

      // Returns a delegate constructor
      delegate: function () {

        var thisDelegate = this;
        var thisElement;
        var editorCtrl;
        //var editorFactory = {};

        this.init = function (element, widgetCtrl) {
          thisElement = element;
          var props = widgetCtrl.designPropertyValues();
          thisDelegate.getEditorCtrl().init(widgetCtrl, props);
        };

        function generateUUID() {
          var d = new Date().getTime();
          if (window.performance && typeof window.performance.now === "function") {
            d += window.performance.now(); //use high-precision timer if available
          }
          var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (d + Math.random() * 16) % 16 | 0; // jshint ignore:line
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16); // jshint ignore:line
          });
          return uuid;
        }

        this.customWidgetId = function () {
          return 'x-' + generateUUID();
        };

        this.beforeDestroy = function (element, widgetCtrl) {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().beforeDestroy();
          }
        };

        this.getEditorCtrl = function () {
          if (!editorCtrl && thisElement) {
            editorCtrl = thisElement.find('twx-dt-3d-view').first().data('ctrl');
          }
          return editorCtrl;
        };

        this.widgetAdded = function (widgetCtrl, originalDropOffset) {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().createObject(widgetCtrl, originalDropOffset);
          }
        };

        this.widgetRemoved = function (widgetCtrl) {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().removeObject(widgetCtrl);
          }
        };

        this.widgetSelected = function (widgetCtrl) {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().selectObject(widgetCtrl);
          }
        };

        this.widgetDeselected = function (widgetCtrl) {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().deselectObject(widgetCtrl);
          }
        };

        this.widgetUpdated = function (widgetCtrl, allProps, changedProps) {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().updateObject(widgetCtrl, allProps, changedProps);
          }
        };

        this.setTranslateMode = function () {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().setReposMode('translate');
          }
        };

        this.setRotateMode = function () {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().setReposMode('rotate');
          }
        };

        this.setMateMode = function () {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().setReposMode('mate');
          }
        };

        this.doZoomAll = function () {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().doZoomAll();
          }
        };

        this.doZoomSelected = function () {
          if (thisDelegate.getEditorCtrl()) {
            thisDelegate.getEditorCtrl().doZoomSelected();
          }
        };

        this.hasSelectedObject = function () {
          if (thisDelegate.getEditorCtrl()) {
            return thisDelegate.getEditorCtrl().hasSelectedObject();
          }
          return false;
        };

        this.getDraggerMode = function () {
          if (thisDelegate.getEditorCtrl() && this.hasSelectedObject()) {
            return thisDelegate.getEditorCtrl().getDraggerMode();
          }
          return '';
        };
        this.getCompHideMode = function () {
          if (thisDelegate.getEditorCtrl()) {
            return thisDelegate.getEditorCtrl().getCompHideMode();
          }
          return '';
        };
        this.toggleCompHideMode = function () {
          if (thisDelegate.getEditorCtrl()) {
            return thisDelegate.getEditorCtrl().toggleCompHideMode();
          }
          return '';
        };
        this.unhideAll = function () {
          if (thisDelegate.getEditorCtrl()) {
            return thisDelegate.getEditorCtrl().unhideAll();
          }
          return '';
        };
        this.hasHiddenComponents = function () {
          if (thisDelegate.getEditorCtrl()) {
            return thisDelegate.getEditorCtrl().hasHiddenComponents();
          }
          return '';
        };

      }
    };
  }

  twxAppBuilder.widget('twxDtView', twxDtView);

})(twxAppBuilder);
