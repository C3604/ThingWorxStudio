/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
(function(twxAppBuilder){

function newDtModel( widgetLabel ) {
  var ELEMENT_NAME = 'twx-dt-model';
  var overlay = {};

  overlay.url = {
    name: 'src',
    label: 'ves-ar-extension:Resource',
    datatype: 'resource_url',
    allowedPatterns: ['.pvz', '.ol'],
    default: '',
    isBindingTarget: true,
    sortOrder: 1
  };
  overlay.translucent = {
    name: 'translucent',
    label: 'ves-ar-extension:Item Translucence',
    datatype: 'boolean',
    default: false,
    isBindingTarget: true,
    sortOrder: 243,
    tFrag: 'phantom="{{!me.translucent}}" ',
    isVisible: false,
    isDeprecated: true
  };
  overlay.forceHidden = {
    name: 'forceHidden',
    label: 'ves-ar-extension:Force Hide',
    datatype: 'boolean',
    default: false,
    isBindingTarget: true,
    sortOrder: 180,
    isVisible: false,
    tFrag: 'force-hidden="{{me.forceHidden}}"'
  };
  overlay.sequence = {
    name: 'sequence',
    label: 'ves-ar-extension:Sequence URL',
    datatype: 'resource_url',
    allowedPatterns: ['.pvi'],
    default: '',
    isBindingTarget: true,
    inlineForOffline: true
  };

  overlay.steps = {
    name: 'steps',
    label: 'ves-ar-extension:Steps',
    datatype: 'number',
    isBindingTarget: false,
    isBindingSource: true,
    showInput: false
  };

  overlay.currentStep = {
    name: 'currentStep',
    label: 'ves-ar-extension:Current Step',
    datatype: 'number',
    isBindingTarget: true,
    isBindingSource: true,
    showInput: false
  };

  overlay.playing = {
    name: 'playing',
    label: 'ves-ar-extension:Playing',
    datatype: 'boolean',
    isBindingTarget: false,
    isBindingSource: true,
    showInput: false
  };

  var services = [];

  services.push({
    name: 'forward',
    label: 'ves-ar-extension:Forward'
  });

  services.push({
    name: 'play',
    label: 'ves-ar-extension:Play'
  });

  services.push({
    name: 'playAll',
    label: 'ves-ar-extension:Play All'
  });

  services.push({
    name: 'reset',
    label: 'ves-ar-extension:Reset'
  });

  services.push({
    name: 'rewind',
    label: 'ves-ar-extension:Rewind'
  });

  services.push({
    name: 'stop',
    label: 'ves-ar-extension:Stop'
  });

  var events = [];

  events.push({
    name: 'playstarted',
    label: 'ves-ar-extension:Play Started'
  });

  events.push({
    name: 'playstopped',
    label: 'ves-ar-extension:Play Stopped'
  });

  events.push({
    name: 'modelLoaded',
    label: 'ves-ar-extension:Model Loaded'
  });

  events.push({
    name: 'click',
    label: 'ves-ar-extension:Click'
  });

  events.push({
    name: 'sequenceacknowledge',
    label: 'ves-ar-extension:Acknowledge Requested'
  });

  var removals = ['billboard'];
  var props = Twx3dCommon.new3dProps(overlay, removals);
  var template = Twx3dCommon.buildRuntimeTemplate(ELEMENT_NAME, props);

  var retObj = {
    elementTag: ELEMENT_NAME,

    isVisibleInPalette: true,

    category: 'ar',

    label: widgetLabel,

    isContainer: false,
    
    properties: props,

    services: services,

    events: events,

    /**
     *
     * @param widget {Object} Widget instance, with properties and current values in the panel
     * @param data   {Object} Extra app info, key fileResources is an array of project resources available.
     * @returns {Array}
     */
    getResources: function(widget, data) {
      //Get Additional resources, return any zip entries found in the file resources
      var modelVal = widget.properties.src.value;
      var result = [];
      if (modelVal && data.fileResources) {

        var recurse = function(entry) {
          if (entry.path === modelVal) {
            result = entry.subFiles;
          }
          else if (entry.children) {
            entry.children.forEach(recurse);
          }
        };
        data.fileResources.forEach(recurse);
      }
      return result;
    },
 
    designTemplate: function (props) {
      return('<!-- twxDtModel -->');
    },

    runtimeTemplate: function (props) {
      var tmpl = template.replace("#widgetId#", props.widgetId);
      return tmpl;
    }
  };

  return retObj;
}

function twxDtModel() {
  var widget = Twx3dCommon.getWidget( 'Model', newDtModel );
  return widget;
}

twxAppBuilder.widget('twxDtModel', twxDtModel);

})(twxAppBuilder);
