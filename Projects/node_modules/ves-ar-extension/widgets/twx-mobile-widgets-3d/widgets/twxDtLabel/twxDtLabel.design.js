/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
(function(twxAppBuilder){

  function newDtLabel( widgetLabel ) {
    var ELEMENT_NAME = 'twx-dt-label';
    var overlay = {};

    overlay.rx = Twx3dCommon.common3dProp('rx');
    overlay.rx.default = -90;
    
    overlay.text = {
      name: 'text',
      label: 'ves-ar-extension:Text',
      datatype: 'string',
      default: 'Label',
      isBindingTarget: true,
      sortOrder: 1
    };

    overlay.textprops = {
      name: 'textprops',
      label: 'ves-ar-extension:Text Properties',
      datatype: 'string',
      default: 'font: 36px Arial;fill:rgba(0, 0, 0 , 1);stroke:rgba(255, 255, 255, 1)',
      isBindingTarget: true,
      tFrag: 'textattrs="{{me.textprops}}"',
      sortOrder: 2
    };

    overlay.pivot = Twx3dCommon.getPivotProperty();
    overlay.width = Twx3dCommon.getWidthProperty();
    overlay.height = Twx3dCommon.getHeightProperty();

    var props = Twx3dCommon.new3dProps(overlay);
    var template = Twx3dCommon.buildRuntimeTemplate(ELEMENT_NAME, props);

    var retObj = {
      elementTag: ELEMENT_NAME,

      isVisibleInPalette: true,

      category: 'ar',

      label: widgetLabel,

      properties: props,

      events: [
        {
          name: 'click',
          label: 'ves-ar-extension:Click'
        }
      ],

      designTemplate: function (props) {
        return ('<!-- twxDtLabel -->');
      },

      runtimeTemplate: function (props) {
        var tmpl = template.replace("#widgetId#", props.widgetId);
        //console.log("twxDtLabel template string: " +  tmpl);
        return tmpl;
      }
    };

    return retObj;
  }

  function twxDtLabel() {
    var widget = Twx3dCommon.getWidget( '3D Label', newDtLabel );
    return widget;
  }

  twxAppBuilder.widget('twxDtLabel', twxDtLabel);

})(twxAppBuilder);
