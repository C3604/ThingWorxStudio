/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
(function(twxAppBuilder){

  function newTwxDtTarget( widgetLabel ) {
    var ELEMENT_NAME = 'twx-dt-target';
    var overlay = {};

    overlay.rx = Twx3dCommon.common3dProp('rx');
    overlay.rx.default = -90;
    overlay.rx.alwaysWriteAttribute = true; // this flag is needed for any defaults different from the browser defaults

    overlay.url = {
      name: 'url',
      label: 'ves-ar-extension:AR Target Name',
      datatype: 'resource_url',
      default: 'Default/thing_code.png',
      tFrag: '',
      isVisible: false
    };

    overlay.markerid = {
      name: 'markerId',
      label: 'ves-ar-extension:ThingMark',
      datatype: 'string',
      default: '',
      placeholder: 'ves-ar-extension:ThingMark ID Placeholder',
      isBindingTarget: true,
      tFrag: 'src="{{' + "'vuforia-vumark:///vumark?id=' + " + "me.markerId}}" + '"',
      sortOrder: 1
    };

    overlay.width = {
      name: 'width',
      label: 'ves-ar-extension:Marker Width',
      datatype: 'number',
      default: 0.0254,
      isBindingTarget: true,
      alwaysWriteAttribute: true,
      tFrag: 'size="{{me.width}}"',
      sortOrder: 2
    };

    overlay.istracked = {
      name: 'istracked',
      label: 'ves-ar-extension:Tracked',
      datatype: 'boolean',
      default: false,
      isBindingSource: true,
      isBindingTarget: false,
      sortOrder: 2000
    };

    overlay.trackingIndicator = {
      name: 'trackingIndicator',
      label: 'ves-ar-extension:Display Tracking Indicator',
      datatype: 'boolean',
      default: true,
      isBindingSource: false,
      isBindingTarget: false,
      alwaysWriteAttribute: true,
      sortOrder: 3000
    };

    overlay.stationary = {
      name: 'stationary',
      label: 'ves-ar-extension:Stationary',
      datatype: 'boolean',
      default: true,
      isBindingSource: false,
      isBindingTarget: false,
      sortOrder: 4000,
      isVisible: function(props, $scope){
        let projectSettings = $scope.$root.projectSettings || {};
        return projectSettings.projectType === 'eyewear';
      }
    };

    var removals = ['billboard', 'occlude', 'opacity', 'visible', 'shader', 'scale'];

    var props = Twx3dCommon.new3dProps(overlay, removals);

    //Decal should be a property that only applies to the image runtime template.
    var decal;
    var i = props.length;
    while (i--) {
      if (props[i].name === 'decal') {
        decal = props.splice(i, 1)[0];
      }
    }
    var template = Twx3dCommon.buildRuntimeTemplate(ELEMENT_NAME, props, true);
    props.push(decal);

    removals = ['markerid', 'width', 'opacity', 'istracked'];
    overlay.url.tFrag = 'src="img/recognised.png?name=sampler0 img/recognised2.png?name=sampler1"';
    overlay.shader = Twx3dCommon.common3dProp('shader');
    overlay.shader.tFrag = 'shader="recogniser;active f {{pulse}}"';
    overlay.sx = Twx3dCommon.common3dProp('scale');
    // 4.51 = 1000*hexagonHeightWidthRatio/256, where 256 is the height of the hexagon image (recognised2.png) in pixels.
    overlay.sx.tFrag = 'sx = "{{me.width*4.51}}"';
    overlay.sy = Twx3dCommon.common3dProp('scale');
    overlay.sy.tFrag = 'sy = "{{me.width*4.51}}"';
    overlay.sz = Twx3dCommon.common3dProp('scale');
    overlay.sz.tFrag = 'sz = "{{me.width*4.51}}"';
    overlay.visible = Twx3dCommon.common3dProp('visible');
    overlay.visible.tFrag = 'hidden="{{!me.trackingIndicator}}"';
    overlay.decal = Twx3dCommon.common3dProp('decal');
    template += Twx3dCommon.buildRuntimeTemplate('twx-dt-image', Twx3dCommon.new3dProps(overlay, removals), true);

    var retObj = {
      elementTag: ELEMENT_NAME,

      label: widgetLabel,

      isVisibleInPalette: true,

      category: 'ar',

      isContainer: false,

      properties: props,

      defaultBindings:  [{
        sourceType: 'data',
        sourceName: 'vumark',
        sourceItemType: 'value',
        sourceItemName: 'vumark',
        sourcePath: "app.params['vumark']",
        targetType: 'widget',
        targetPath: 'markerId',
        bindingType: 'custom_field'
      }],
      events: [
        {
          name: 'trackingacquired',
          label: 'ves-ar-extension:Tracking Acquired'
        },
        {
          name: 'trackinglost',
          label: 'ves-ar-extension:Tracking Lost'
        }
      ],

      designTemplate: function (props) {
        return ('<!-- twxDtTarget -->');
      },

      runtimeTemplate: function (props) {
        var tmpl = template.replace("#widgetId#", props.widgetId);
        tmpl = tmpl.replace("#widgetId#", props.widgetId + '-image'); // replace the twx-dt-image id
        return tmpl;
      }
    };
    return retObj;
  }

  function twxDtTarget() {
    var widget = Twx3dCommon.getWidget( 'ThingMark', newTwxDtTarget );
    return widget;
  }
  twxAppBuilder.widget('twxDtTarget', twxDtTarget);

})(twxAppBuilder);
