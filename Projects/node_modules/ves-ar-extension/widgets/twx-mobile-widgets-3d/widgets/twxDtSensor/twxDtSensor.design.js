/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
(function(twxAppBuilder){

  function newDtSensor( widgetLabel ) {
    var ELEMENT_NAME = 'twx-dt-sensor';
    var properties = [
      {
        name: 'src',
        label: 'ves-ar-extension:Resource',
        datatype: 'resource_url',
        resource_image: true,
        default: 'Default/vu_gauge1.svg',
        isBindingTarget: true,
        alwaysWriteAttribute: true,
        sortOrder: 2,
        inlineForOffline: true
      },
      {
        name: 'text',
        label: 'ves-ar-extension:Text',
        datatype: 'string',
        default: '###',
        isBindingTarget: true,
        sortOrder: 1
      },
      {
        name: 'font',
        label: 'ves-ar-extension:Font',
        datatype: 'string',
        default: 'Arial',
        isBindingTarget: true,
        sortOrder: 10
      },
      {
        name: 'fontsize',
        label: 'ves-ar-extension:Font Size',
        datatype: 'string',
        default: '40px',
        isBindingTarget: true,
        alwaysWriteAttribute: true,
        sortOrder: 11
      },
      {
        name: 'canvasgrowthoverride',
        label: 'ves-ar-extension:Canvas Growth Override',
        datatype: 'string',
        default: 'image+text',
        isBindingTarget: true,
        editor: 'select',
        options: [
          {label: 'ves-ar-extension:Canvas grows with text size', value: 'text'},
          {label: 'ves-ar-extension:Canvas grows with image Size', value: 'image'},
          {label: 'ves-ar-extension:Canvas grows with image and text sizes', value: 'image+text'},
          {label: 'ves-ar-extension:No Override', value: 'canvas'}
        ],
        sortOrder: 122
      },
      {
        name: 'canvasheight',
        label: 'ves-ar-extension:Canvas Height',
        datatype: 'number',
        default: 128.0,
        isBindingTarget: false,
        alwaysWriteAttribute: true,
        sortOrder: 123
      },
      {
        name: 'canvaswidth',
        label: 'ves-ar-extension:Canvas Width',
        datatype: 'number',
        default: 128.0,
        isBindingTarget: false,
        alwaysWriteAttribute: true,
        sortOrder: 124
      },
      {
        name: 'imagex',
        label: 'ves-ar-extension:X coord of Image w/r/t Canvas',
        datatype: 'number',
        default: 0,
        isBindingTarget: true,
        sortOrder: 120
      },
      {
        name: 'imagey',
        label: 'ves-ar-extension:Y coord of Image w/r/t Canvas',
        datatype: 'number',
        default: 0,
        isBindingTarget: true,
        sortOrder: 121
      },
      {
        name: 'imageattrs',
        label: 'ves-ar-extension:Image Attributes',
        datatype: 'string',
        default: '',
        isBindingTarget: true,
        sortOrder: 20,
        isVisible: false
      },
      {
        name: 'textx',
        label: 'ves-ar-extension:X coord of Text w/r/t Canvas',
        datatype: 'number',
        default: 64,
        isBindingTarget: true,
        alwaysWriteAttribute: true,
        sortOrder: 13
      },
      {
        name: 'texty',
        label: 'ves-ar-extension:Y coord of Text w/r/t Canvas',
        datatype: 'number',
        default: 94,
        isBindingTarget: true,
        alwaysWriteAttribute: true,
        sortOrder: 14
      },
      {
        name: 'textattrs',
        label: 'ves-ar-extension:Text Attributes',
        datatype: 'string',
        default: 'fill:rgba(255, 255, 255, 1);textbaseline:middle;textalign:center',
        isBindingTarget: true,
        alwaysWriteAttribute: true,
        sortOrder: 12
      },
      {
        name: 'billboard',
        label: 'ves-ar-extension:Billboard',
        datatype: 'boolean',
        default: true,
        isBindingTarget: true,
        alwaysWriteAttribute: true,
        sortOrder: 200
      }
    ];

    properties.push(Twx3dCommon.getPivotProperty());
    properties.push(Twx3dCommon.getWidthProperty());
    properties.push(Twx3dCommon.getHeightProperty());

    var overlay = Twx3dCommon.arrayToMap(properties);

    var props = Twx3dCommon.new3dProps(overlay);

    var retObj = {
      elementTag: ELEMENT_NAME,

      isVisibleInPalette: true,

      category: 'ar',

      label: widgetLabel,

      isContainer: false,

      properties: props,

      events: [
        {
          name: 'click',
          label: 'ves-ar-extension:Click'
        }
      ],

      isBuildRequired: function( changedProps ) {
        if (changedProps === undefined) {
          return false;
        }
        var changedPropKeys = Object.keys(changedProps);

        if (changedPropKeys.length === 0) {
          return false;
        }

        for (var i=0; i < changedPropKeys.length; i++) {
          var currentKey = changedPropKeys[i];
          //if any of the changed props show up in overlay return true
          if (overlay[currentKey] !== undefined) {
            return true;
          }
        }
      },

      designTemplate: function (props) {
        return ('<!-- 3dSensor -->');
      },

      runtimeTemplate: function (props) {
        // no longer builds textattrs or imageattrs live here

        var tmpl = '<' + ELEMENT_NAME + ' ' +
            'id="' + props.widgetId + '" ' +
            'x="{{me.x}}" ' +
            'y="{{me.y}}" ' +
            'z="{{me.z}}" ' +
            'rx="{{me.rx}}" ' +
            'ry="{{me.ry}}" ' +
            'rz="{{me.rz}}" ' +
            'sx="{{me.scale.split(\' \')[0] || me.scale}}" ' +
            'sy="{{me.scale.split(\' \')[1] || me.scale}}" ' +
            'sz="{{me.scale.split(\' \')[2] || me.scale}}" ' +
            'billboard="{{me.billboard}}" ' +
            'occlude="{{me.occlude}}" ' +
            'opacity="{{me.opacity}}" ' +
            'decal="{{me.decal}}" ' +
            'canvasheight="{{me.canvasheight}}" ' +
            'canvaswidth="{{me.canvaswidth}}" ' +
            'height="{{me.height}}" ' +
            'width="{{me.width}}" ' +
            'imageattrs="{{app.fn.buildImageAttrs(me.imagex,me.imagey,me.imageattrs)}}" ' +
            'textattrs="{{app.fn.buildTextAttrs(me.textx,me.texty,me.font,me.fontsize,me.textattrs)}}" ' +
            'canvasgrowthoverride="{{me.canvasgrowthoverride}}" ' +
            'textx="{{me.textx}}" ' +
            'texty="{{me.texty}}" ' +
            'imagex="{{me.imagex}}" ' +
            'imagey="{{me.imagey}}" ' +
            'text="{{me.text}}" ' +
            'src="{{me.src}}" ' +
            'shader="{{me.shader}}" ' +
            //'visible="{{me.visible}}" ' +
            'hidden="{{!me.visible}}"/>';
            //'hidden="{{ (me.visible === \'true\' || me.visible === true) ? false : true}}"/>';
        //console.log("twxArSensor.runtimeTemplate: " + tmpl);
        return tmpl;
      }
    };
    return retObj;
  }

  function findAndAssignPropertyDefault(obj, name, value) {
    var prop = _.find(obj.properties, {name: name});
    prop.default = value;
  }
  
  function twxDtSensor(project) {
    var sensor = Twx3dCommon.getWidget( '3D Gauge', newDtSensor );

    if (project && project.projectType === 'eyewear') {
      sensor = _.cloneDeep(sensor);
      findAndAssignPropertyDefault(sensor, 'fontsize', '80px');
      findAndAssignPropertyDefault(sensor, 'textx', 128);
      findAndAssignPropertyDefault(sensor, 'texty', 188);
      findAndAssignPropertyDefault(sensor, 'canvaswidth', 256.0);
      findAndAssignPropertyDefault(sensor, 'canvasheight', 256.0);
    }
    return sensor;
  }

  twxAppBuilder.widget('twxDtSensor', twxDtSensor);

})(twxAppBuilder);
