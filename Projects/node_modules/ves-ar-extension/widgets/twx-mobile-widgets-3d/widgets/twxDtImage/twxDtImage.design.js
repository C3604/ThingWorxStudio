/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
var Twx3dCommon = (function ( me ) {
    var OUTPUT_CACHE_STATS = false;
    var OUTPUT_CACHE_HIT_PERIOD = 10;
    var cacheMisses = {};
    var cacheHits = {};
    var cache = {};
    var COMMON_PROPS_3D = [
        {
            name: 'x',
            label: 'ves-ar-extension:X Coordinate',
            datatype: 'number',
            default: 0.0,
            isBindingTarget: true,
            sortOrder: 100,
            decimalLimit: 3
        },
        {
            name: 'y',
            label: 'ves-ar-extension:Y Coordinate',
            datatype: 'number',
            default: 0.0,
            isBindingTarget: true,
            sortOrder: 101,
            decimalLimit: 3
        },
        {
            name: 'z',
            label: 'ves-ar-extension:Z Coordinate',
            datatype: 'number',
            default: 0.0,
            isBindingTarget: true,
            sortOrder: 102,
            decimalLimit: 3
        },
        {
            name: 'rx',
            label: 'ves-ar-extension:X Rotation',
            datatype: 'number',
            default: 0.0,
            isBindingTarget: true,
            sortOrder: 110,
            decimalLimit: 3
        },
        {
            name: 'ry',
            label: 'ves-ar-extension:Y Rotation',
            datatype: 'number',
            default: 0.0,
            isBindingTarget: true,
            sortOrder: 111,
            decimalLimit: 3
        },
        {
            name: 'rz',
            label: 'ves-ar-extension:Z Rotation',
            datatype: 'number',
            default: 0.0,
            isBindingTarget: true,
            sortOrder: 112,
            decimalLimit: 3
        },
        {
            name: 'scale',
            label: 'ves-ar-extension:Scale',
            datatype: 'string',
            default: '1.0',
            isBindingTarget: true,
            sortOrder: 90,
            validationRegex: '^[\\d\\.]*$|^[\\d\\.]+ [\\d\\.]+ [\\d\\.]+$', //Matches single decimal number or 3 decimals comma separated
            tFrag: ' sx="{{me.scale.split(\' \')[0] || me.scale}}" sy="{{me.scale.split(\' \')[1] || me.scale}}" sz="{{me.scale.split(\' \')[2] || me.scale}}"'
        },
        {
            name: 'visible',
            label: 'ves-ar-extension:Visible',
            datatype: 'boolean',
            default: true,
            isBindingTarget: true,
            sortOrder: 150,
            tFrag: 'hidden="{{!me.visible}}" '
        },
        {
            name: 'billboard',
            label: 'ves-ar-extension:Billboard',
            datatype: 'boolean',
            default: false,
            isBindingTarget: true,
            sortOrder: 200
        },
        {
            name: 'occlude',
            label: 'ves-ar-extension:Occluding',
            datatype: 'boolean',
            default: false,
            isBindingTarget: true,
            sortOrder: 220
        },
        {
            name: 'decal',
            label: 'ves-ar-extension:Always on top',
            datatype: 'boolean',
            default: false,
            isBindingTarget: true,
            sortOrder: 230
        },
        {
            name: 'opacity',
            label: 'ves-ar-extension:Opacity (1 Opaque - 0 Transparent)',
            datatype: 'number',
            default: 1,
            isBindingTarget: true,
            sortOrder: 240
        },
        {
            name: 'shader',
            label: 'ves-ar-extension:Shader Name',
            datatype: 'string',
            default: '',
            isBindingTarget: true,
            isVisible: false,
            sortOrder: 250
        }
    ];

    me.getPivotProperty = function() {
        return {
            name: 'pivot',
            label: 'ves-ar-extension:Pivot',
            datatype: 'select',
            default: '5',
            isBindingTarget: false,
            editor: 'select',
            options: [
                {label: 'ves-ar-extension:Top Left', value: "1"},
                {label: 'ves-ar-extension:Top Center', value: "2"},
                {label: 'ves-ar-extension:Top Right', value: "3"},
                {label: 'ves-ar-extension:Middle Left', value: "4"},
                {label: 'ves-ar-extension:Middle Center', value: "5"},
                {label: 'ves-ar-extension:Middle Right', value: "6"},
                {label: 'ves-ar-extension:Bottom Left', value: "7"},
                {label: 'ves-ar-extension:Bottom Center', value: "8"},
                {label: 'ves-ar-extension:Bottom Right', value: "9"}
            ],
            sortOrder: 245
        };
    };

    me.getHeightProperty = function() {
        return {
            name: 'height',
            label: 'ves-ar-extension:Height',
            datatype: 'number',
            default: '',
            isBindingTarget: true,
            sortOrder: 285
        };
    };

    me.getWidthProperty = function() {
        return {
            name: 'width',
            label: 'ves-ar-extension:Width',
            datatype: 'number',
            default: '',
            isBindingTarget: true,
            sortOrder: 290
        };
    };

    me.arrayToMap = function(array) {
        var retObj = array.reduce(function (map, current) {
            map[current.name] = current;
            return map;
        }, {});
        return retObj;
    };

    var MAP_PROPS_3D = me.arrayToMap(COMMON_PROPS_3D);

    /**
     * Clone handling only simple cases - as COMMON_PROPS_3D and concept of 'properties' in widget is simple
     * i.e. - not handling scenario of Dates, Arrays, etc.
     * @param obj - the object to clone
     * @returns {*} - a clone of obj
     */
    function clone(obj) {
        var copy;

        // Handle the 3 simple types, and null or undefined
        if (null == obj || "object" != typeof obj) return obj;

        // Handle Object
        if (obj instanceof Object) {
            //console.log("Handling CLONE of an object");
            copy = {};
            for (var attr in obj) {
                if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
            }
            return copy;
        }
        throw new Error("Unable to copy obj! Its type isn't supported.");
    }

    function cacheWidget(label, widget) {
        cache[label] = widget;
        if (OUTPUT_CACHE_STATS) {
            //implied miss
            if (cacheMisses[label]) {
                cacheMisses[label]++;
            } else {
                cacheMisses[label] = 1;
            }
            console.log("3D Widget cache MISS(es) in Twx3dCommon for " + label + ": " + cacheMisses[label]);
        }
    }

    /**
     * Either gets the widget from the cache if it has already been built or invokes factoryFunction to build it.
     * @param label - the label (and cache key) of the widget
     * @param factoryFunction - the function used to create a widget.
     * @returns {*}
     */
    me.getWidget = function(label, factoryFunction) {
        var retObj = cache[label];
        if (retObj) {
            if (OUTPUT_CACHE_STATS) {
                if (cacheHits[label]) {
                    cacheHits[label]++;
                } else {
                    cacheHits[label] = 1;
                }
                if (cacheHits[label] % OUTPUT_CACHE_HIT_PERIOD === 0) {
                    console.log("3D Widget cache HIT(s) in Twx3dCommon for " + label + ": " + cacheHits[label]);
                }
            }
            return retObj;
        }

        //miss
        retObj = factoryFunction(label);
        cacheWidget(label, retObj);
        return retObj;
    };

    me.new3dProps = function(overlay, keyRemovalList) {
        var copy = clone(MAP_PROPS_3D);
        var overlayKeys = Object.keys(overlay);

        for (var i=0; i < overlayKeys.length; i++) {
            var currentKey = overlayKeys[i];
            copy[currentKey] = overlay[currentKey];
        }

        if(keyRemovalList && keyRemovalList.length && keyRemovalList.length > 0) {
            for (var i=0; i < keyRemovalList.length; i++) {
                delete copy[keyRemovalList[i]];
            }
        }

        var props = [];
        var copyKeys = Object.keys(copy);

        for (var i=0; i < copyKeys.length; i++) {
            var currentKey = copyKeys[i];
            var obj = copy[currentKey];
            props.push( obj );
        }

        //Allow custom ordering of properties, sortOrder first, alphabetical second (combined into one function,
        //to avoid issues with non-preserving sort functions when values are equal
        props = props.sort(function(a,b){
            if (b.sortOrder || a.sortOrder)  {
                var bval = b.sortOrder || 1000;
                var aval = a.sortOrder || 1000;
                return (aval - bval);
            }

            if (b.label.toLowerCase() > a.label.toLowerCase()) {
                return -1;
            }
            else {
                return 1;
            }
        });

        return props;
    };

/**
     * Convenience function to generate a conventional runtime template for 3d widgets.
     * If the conventions here don't work for your needs:
     * 1. Try using a 'tFrag' property in the object (see visible/hidden for example)
     * 2. Create your own template
     * @param elementName - name of element (e.g. armodelitem, arimage, arsensor, etc.)
     * @param props - the properties to be included in the template
     * @param generateId - generate the id attribute if not false
     */
    me.buildRuntimeTemplate = function(elementName, props, generateId) {
        if ( props === undefined || props === null ) {
            console.warn("Generation of runtime template for " + elementName + " aborted. No properties defined");
            return "<!-- " + (elementName ? elementName : "(unknown element)") + ": no properties defined -->";
        }

        var tmpl = '<' + elementName + ' ';

        if (generateId !== false) {
            tmpl += 'id="#widgetId#" ';
        }

        var keys = Object.keys(props);
        for (var i=0; i < keys.length; i++) {
            var currentObjName = props[i]['name'];

            var currentObjTFrag = props[i]['tFrag'];

            if ( currentObjTFrag !== undefined ) {
                tmpl += currentObjTFrag;
                tmpl += ' ';
                continue;
            }

            //there may be a need here to filter out keys that are in the bag - but should
            //not be included in attributes of the XML element being generated (e.g widgetId)

            tmpl += currentObjName + '="{{me.' + currentObjName + '}}" ';

        }
        tmpl += '/>'; //<-- that's right - constituents not supported here
        return tmpl;
    };

    me.common3dProp = function( name ) {
      return clone(MAP_PROPS_3D[name]);
    };

    return me;

}( Twx3dCommon || {} ));

(function(twxAppBuilder){

  function newTwxDtImage( widgetLabel ) {
      var ELEMENT_NAME = 'twx-dt-image';
      var overlay = {};

      overlay.rx = Twx3dCommon.common3dProp('rx');
      overlay.rx.default = -90;

      overlay.src = {
          name: 'src',
          label: 'ves-ar-extension:Resource',
          datatype: 'resource_url',
          resource_image: true,
          default: 'Default/twLogo.png',
          isBindingTarget: true,
          tFrag: 'src="{{me.src}}"',
          sortOrder: 1
      };

      overlay.pivot = Twx3dCommon.getPivotProperty();
      overlay.width = Twx3dCommon.getWidthProperty();
      overlay.height = Twx3dCommon.getHeightProperty();

      var props = Twx3dCommon.new3dProps(overlay);
      var template = Twx3dCommon.buildRuntimeTemplate(ELEMENT_NAME, props);

      var retObj = {
          elementTag: ELEMENT_NAME,

          isVisibleInPalette: true,

          category: 'ar',

          label: widgetLabel,

          isContainer: false,

          properties: props,

          events: [
              {
                  name: 'click',
                  label: 'ves-ar-extension:Click'
              }
          ],

          designTemplate: function (props) {
              return ('<!-- twxDtImage -->');
          },

          runtimeTemplate: function (props) {
              var tmpl = template.replace("#widgetId#", props.widgetId);
              //console.log("twxDtImage template: " +  tmpl);
              return tmpl;
          }
      };
      return retObj;
  }

  function twxDtImage() {
      //This call gets a cached widget - if there is one. Arguably, though, we don't want a cached widget -
      // we want a new widget each time _BUT_ when a widget is in a scene - its ctor is called over 30 times
      // per instance of widget so lets see what happens if I return a cached value.
      var widget = Twx3dCommon.getWidget( '3D Image', newTwxDtImage );
      return widget;
  }

  twxAppBuilder.widget('twxDtImage', twxDtImage);

})(twxAppBuilder);
