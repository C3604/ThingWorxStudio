/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
/**
 * Adds the necessary state formatting properties to the properties array
 * @param properties
 * @returns properties Array with new entries.
 */
function addStateFormattingProperties(properties) {
  var classIndex = 0;
  var stateFormatIndex = -1;
  var i = properties.length;
  while (i--) {
    if (properties[i].name === 'class') {
      classIndex = i + 1;
    }
    if (properties[i].name === 'stateFormat') {
      stateFormatIndex = i;
    }
  }
  if (stateFormatIndex === -1) {
    properties.splice(classIndex, 0, {
        name: 'enableStateFormatting',
        label: 'Enable State-Based Formatting',
        datatype: 'boolean',
        isBindingTarget: false,
        default: false
      },
      {
        name: 'stateFormatValue',
        label: 'Dependent Field',
        datatype: 'string',
        isBindingTarget: true,
        isVisible: function(props) {
          return (props.enableStateFormatting === true);
        }
      },
      {
        name: 'stateFormat',
        label: 'State Definition',
        isBindingTarget: false,
        datatype: 'custom_ui',
        runtimeDatatype: 'string',
        visibleValue: true,
        buttonLabel: 'Select',
        title: 'State Definition',
        done: 'ctrl.customWidgetEditorTargetWidgetProperty.value = ctrl.customWidgetEditorTargetWidgetProperty.pickedValue',
        template: function() {
          return '<state-format-picker></state-format-picker>';
        },
        isVisible: function(props) {
          return (props.enableStateFormatting === true);
        }
      });
  }

  return properties;
}

(function (twxAppBuilder) {
  var defaultText = 'Label';
  try {
    defaultText = i18next.t('ves-ar-extension:Label');
  }
  catch(e){
    //Running on the server
  }

  function twxList() {
    return {
      elementTag: 'twx-list',

      label: 'ves-ar-extension:List',

      category: 'ionic-2D',

      isVisibleInPalette: true,

      properties: addStateFormattingProperties([
        {
          name: 'list',
          label: 'ves-ar-extension:List',
          datatype: 'infotable',
          isBindingTarget: true
        },
        {
            name: 'class',
            label: 'ves-ar-extension:Class',
            datatype: 'string',
            isBindingTarget: true
        },
        {
          name: 'multiselect',
          label: 'ves-ar-extension:Multi-Select',
          datatype: 'boolean',
          default: false
        },
        {
          name: 'label',
          label: 'ves-ar-extension:Label',
          datatype: 'string',
          default: defaultText,
          isBindingTarget: true
        },
        {
          name: 'visible',
          label: 'ves-ar-extension:Visible',
          datatype: 'boolean',
          default: true,
          isBindingTarget: true
        },
        {
          name: 'scrollable',
          label: 'ves-ar-extension:Scrollable',
          datatype: 'boolean',
          default: true,
          isVisible: false
        },
        {
          name: 'itempadding',
          label: 'ves-ar-extension:List Item Padding',
          datatype: 'string',
          default: ''
        }
      ]),

      events: [
        {
          name: 'itemclick',
          label: 'ves-ar-extension:ItemClick'
        }
      ],

      designTemplate: function () {
        return '<div class="list">' +
                  '<div class="item {{me.class}}" style="padding: {{me.itempadding}};">' +
                    '{{me.label}}' +
                  '</div>' +
                '</div>';
      },

      runtimeTemplate: function (propertyValues) {
        var padding = '';
        if (propertyValues.itempadding) {
          padding = 'padding:' +propertyValues.itempadding + ';';
        }

        var scrollableClass = (propertyValues.scrollable === 'true') ? 'scrollable' : '';
        var tmpl = '<ion-list ng-show="app.fn.isTrue(me.visible)" class="'+ scrollableClass +'">';
        if (propertyValues.enableStateFormatting === 'true') {
          tmpl +='<twx-widget ng-repeat="item in me.list" ng-init="parentList = me;" twx-auto-assign-item>' +
            '     <twx-widget-property name="stateFormat" datatype="string" value="'+propertyValues.stateFormat+'"></twx-widget-property>' +
            '     <twx-widget-property name="stateFormatValue" datatype="string" value="item.'+propertyValues.stateFormatValue+'"></twx-widget-property>' +
            '     <twx-widget-property name="enableStateFormatting" datatype="boolean" value="'+propertyValues.enableStateFormatting+'"></twx-widget-property>' +
            '     <twx-widget-content ng-init="me.item = item">' +
            '       <ion-item style="'+ padding +'" class="item {{parentList.class}} basic-state-formatting basic-state-formatting-image" ';
        }
        else {
          tmpl += '<ion-item ng-repeat="item in me.list" style="'+ padding +'" class="item {{parentList.class}} basic-state-formatting basic-state-formatting-image" ';
        }
        tmpl +='ng-click="app.fn.clickItemInRepeater(item,parentList.list,parentList.multiselect);fireEvent(\'itemclick\');">' +
                    '{{item.'+ propertyValues.label +'}}' +
                '</ion-item>';

        if (propertyValues.enableStateFormatting === true) {
          tmpl += '</twx-widget-content>' +
                 '</twx-widget>';
        }
        tmpl += '</ion-list>';

        return tmpl;
      }
    };
  }

  twxAppBuilder.widget('twxList', twxList);

})(twxAppBuilder);