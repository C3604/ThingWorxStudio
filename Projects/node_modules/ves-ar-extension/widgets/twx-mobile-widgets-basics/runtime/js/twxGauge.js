/* begin copyright text
 *
 * Copyright Â© 2016 PTC Inc., Its Subsidiary Companies, and /or its Partners. All Rights Reserved.
 *
 * end copyright text
 */
/* globals exports, JustGage */
if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  module.exports = 'ngJustGage';
}

(function () {
  'use strict';

  function justGage($timeout) {
    return {
      restrict: 'EA',
      scope: {
        id: '@',
        class: '@',
        min: '=',
        max: '=',
        title: '@',
        label: '@',
        value: '@',
        options: '=',
        width: '@',
        height: '@'
      },
      template: '<div id="{{id}}-justgage" class="{{class}}" style="width: {{width}}; height: {{height}};"></div>',
      link: function (scope, element, attrs) {
        function guid() {
          function _p8(s) {
            var p = (Math.random().toString(16) + "000000000").substr(2, 8);
            return s ? "-" + p.substr(0, 4) + "-" + p.substr(4, 4) : p;
          }

          return _p8() + _p8(true) + _p8(true) + _p8();
        }
        var newId = element[0].id + guid();
        element[0].id = newId;

        $timeout(function () {
          var options = {
            id: newId,
            min: scope.min || 0,
            max: scope.max || 100,
            title: scope.title,
            label: scope.label || '',
            value: scope.value,
            relativeGaugeSize: true
          };

          scope.id = newId;

          if (scope.options) {
            Object.keys(scope.options).forEach(function(key) {
              options[key] = scope.options[key];
            });
          }

          var graph = new JustGage(options);

          element[0].closest('twx-widget').addEventListener('styleReady', function (e) {
              var backgroundColor = window.getComputedStyle(element[0]).getPropertyValue("--backgroundColor");
              var foregroundColor = window.getComputedStyle(element[0]).getPropertyValue("--foregroundColor");
              var fontSize = window.getComputedStyle(element[0]).getPropertyValue("--textSize");
              fontSize = fontSize.slice(0,-2);

              var newOptions = {
                id: newId,
                min: scope.min || 0,
                max: scope.max || 100,
                title: scope.title,
                label: scope.label || '',
                value: scope.value,
                levelColors: [backgroundColor],
                titleFontColor: foregroundColor,
                valueFontColor: foregroundColor,
                valueMinFontSize: fontSize,
                relativeGaugeSize: true,
              };
              if(graph){
                graph.destroy();
              }
              graph = new JustGage(newOptions);
              
          }, false);


          scope.$watch('max', function (updatedMax) {
            if (updatedMax !== undefined) {
              graph.refresh(scope.value, updatedMax);
            }
          }, true);

          scope.$watch('value', function (updatedValue) {
            if (updatedValue !== undefined) {
              graph.refresh(updatedValue);
            }
          }, true);
        
        });
        
      }
    };
  }
  var justGageModule = angular.module('ngJustGage', []);
  justGageModule.directive('justGage', ['$timeout', justGage]);
}());
